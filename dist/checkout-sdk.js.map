{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/checkout/index.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout-buttons/index.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/index.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CheckoutActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","OrderActionType","StandardError","_super","message","_this","this","type","_utility__WEBPACK_IMPORTED_MODULE_1__","_newTarget","Error","captureStackTrace","stack","tslib__WEBPACK_IMPORTED_MODULE_0__","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","CheckoutButtonActionType","InstrumentActionType","MissingDataErrorType","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","EmbeddedCheckoutEventType","RemoteCheckoutActionType","ContentType","CountryActionCreator","_countryRequestSender","loadCountries","options","external_rxjs_","observer","next","data_store_","country_actions","LoadCountriesRequested","then","response","LoadCountriesSucceeded","body","data","complete","catch","error","LoadCountriesFailed","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","OrderFinalizationNotRequiredError","external_tslib_","standard_error","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","getByMethod","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","FinalizeRequested","_loadOrderPaymentsIfNeeded","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","paymentStrategies","isInitialized","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactory","payment_method_types","_isLegacyMethod","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","_scriptLoader","testMode","scriptURI","_getScriptURI","loadScript","window","AfterPay","AmazonPayPaymentStrategy","_billingAddressActionCreator","_window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","address","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","PaymentMethodCancelledError","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","preloadPaypal","getPaypal","tokenizeCard","requestData","_mapToCreditCard","getClient","client","creditCards","paypal","amount","storeLanguage","currency","offerCredit","tokenize","enableShippingAddress","flow","useraction","verifyCard","addFrame","removeFrame","all","get3DS","cancelVerifyCard","verification","cancel","payment_method_cancelled_error","cancellable_promise","iframe","promise","appendSessionId","processedPayment","getDataCollector","deviceData","deviceSessionId","teardown","creditCard","streetAddress","address1","address2","cardholderName","ccName","number","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","country","postalCode","endpoint","ChasePayEventType","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","card","ccType","shouldSaveInstrument","tokenizedCard","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","code","BraintreeVisaCheckoutPaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","subtotal","currencyCode","visaCheckout","visaInitOptions","init","on","paymentSuccessPayload","_paymentInstrumentSelected","handleSuccess","loadCurrentCheckout","queueId","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_chasePayScriptLoader","_wepayRiskClient","_walletEvent$","_methodId","chasepay","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","_configureWallet","removeEventListener","_chasePayClient","_getPayment","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","subscribe","event","merchantRequestId","post","Accept","Content-Type","to_form_url_encoded","action","provider","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","preventDefault","bind_decorator","CreditCardPaymentStrategy","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_googlePayOptions","_getGooglePayOptions","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","card_information","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","client_token","show_form","payment_method_invalid_error","authorize","res","approved","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","_masterpassScriptLoader","masterpass","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","callbackUrl","get_callback_url","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","loadPaypal","_paypalSdk","setup","button","environment","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","top","location","href","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_setExternalCheckoutData","requestShippingAddress","requestBillingInfo","total","label","storeName","String","pending","JSON","stringify","setPostalCode","element","masterpassBtn","elementId","style","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","config_action_creator","config_request_sender","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","chasepay_script_loader","wepay_risk_client","create_googlepay_payment_processor","googlepay_braintree_initializer","wepay_payment_strategy","masterpass_script_loader","googlepay_stripe_initializer","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_actions","LoadInstrumentsRequested","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","LoadInstrumentsSucceeded","LoadInstrumentsFailed","deleteInstrument","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","_isValidVaultAccessToken","date","newDate","valueOf","Date","now","isFuture","vaultAccessExpiry","getTime","setMinutes","getMinutes","getVaultAccessToken","getCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","map","bigpayToken","bigpay_token","defaultInstrument","default_instrument","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","errorResponse","loadInstrumentsWithAddress","checkout_store_selector","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","checkout_store_error_selector","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","statuses","ErrorMessageTransformer","_messageCustomizer","transform","to_single_line","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_state","_errorTransformer","get_environment","error_message_transformer","isCheckoutServiceError","CustomerNotInitialized","ShippingNotInitialized","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","DEFAULT_RESPONSE","RequestError","ConfigActionType","selectorDecorator","target","decoratedTarget","class_1","getOwnPropertyNames","forEach","descriptor","getOwnPropertyDescriptor","resolver","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","args","getKey","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","getUsedCount","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","keyFilter","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","set","selectorMethodDecorator","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","objectA","objectB","Array","isArray","index","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keysA","keys","keysB","length_2","isObjectEqual","CustomerActionType","PaymentActionType","HOSTED","OFFLINE","AmountTransformer","_dp","toInteger","Math","floor","pow","isIframeEvent","InvalidArgumentError","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","containerId","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","useCache","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","checkout_button_method_type","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","push","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","split","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_getMethodId","_createSignInButton","parentNode","removeChild","googlePayButton","createButton","appendChild","_onPaymentSelectComplete","_onError","masterpass_button_strategy","MasterpassButtonStrategy","_signInButton","buttonContainer","createElement","src","cartAmount","PaypalButtonStrategy","clientId","actions","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","formPoster","checkout_button_initializer","checkout_button_strategy_action_creator","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","mapToInternalLineItems","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","itemMap","decimalPlaces","idKey","reduce","result","item","mapToInternalLineItemType","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodInvalidError","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","slice","isMatched","parentMaps_1","maps","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","createActionTransformer","requestErrorFactory","action$","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","detail","createError","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","amountTransformer","imageUrl","amountAfterDiscount","discount","integerAmount","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","_amount_transformer__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","billing_address_selector","BillingAddressSelector","continueAsGuestError","config_selector","ConfigSelector","getExternalSource","form_selector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","country_selector","CountrySelector","payment_selector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","replace","step","storeCredit","payments","providerType","payment_method_selector","PaymentMethodSelector","loadMethodId","loadMethodError","payment_strategy_selector","PaymentStrategySelector","payment_strategy_state","initializeMethodId","initializeError","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","cart_selector","checkout_button_selector","coupon_selector","customer_selector","customer_strategy_selector","gift_certificate_selector","instrument_selector","shipping_address_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","create_freeze_proxy","setPrototypeOf","__proto__","isPrivate","indexOf","PaymentMethodActionCreator","rxjs__WEBPACK_IMPORTED_MODULE_2__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","origin","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","splice","trigger","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","_common_utility__WEBPACK_IMPORTED_MODULE_2__","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","postMessage","setTarget","INTERNAL_USE_ONLY","CheckoutButtonSelector","initializedContainers","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","DEFAULT_DATA_STATE","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","InvalidLoginTokenError","title","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_attemptLogin","createFrame","_iframe","hide","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","test","parse_url","pathname","invalid_login_token_error","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","visibility","opacity","handleTransitionEnd","bottom","left","height","width","position","right","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","NotEmbeddableError","ResizableIframeCreator","not_embeddable_error","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","mapToInternalCart","promotions","notifications","amount_transformer","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","CheckoutRequestSender","params","include","put","CheckoutActionCreator","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","DEFAULT_PARAMS","ConsignmentRequestSender","delete","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","joinErrors","map_from_payment_error_response_joinErrors","PAYMENT_ERROR_CODES","RequestErrorFactory","_factoryMethods","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","storefrontErrorResponse","internalErrorResponse","billingAddressReducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","merge_or_push","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","createCheckoutStore","initialState","factory","actionTransformer","create_action_transformer","request_error_factory","unrecoverable_error","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CheckoutIncludes","consignment_action_creator_ConsignmentActionCreator","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","consignment_actions","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","isAddressEqual","lodash__WEBPACK_IMPORTED_MODULE_0__","addressA","addressB","normalize","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","NotInitializedErrorType","NotInitializedError","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","hash","hostname","port","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","fn","instanceMethods","cache_key_resolver","createFreezeProxies","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","CustomerStrategyActionCreator","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","_common_error__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_4__","CustomerActionCreator","_customerRequestSender","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","CustomerRequestSender","omitDeep","predicate","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_3__","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","mergeOrPush","array","newArray","shippingCountryReducer","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_2__","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_3__","customerCanBeCreated","mapToInteralOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","customerStrategyReducer","customer_strategy_actions","getCallbackUrl","omitPrivate","_is_private__WEBPACK_IMPORTED_MODULE_0__","_omit_deep__WEBPACK_IMPORTED_MODULE_1__","getEnvironment","process","NODE_ENV","e","OrderRequestSender","OrderActionCreator","_orderRequestSender","_order_actions__WEBPACK_IMPORTED_MODULE_6__","_getCurrentOrderId","SubmitOrderRequested","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","giftWrapping","toSingleLine","input","line","trim","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponActionCreator","_couponRequestSender","_checkout__WEBPACK_IMPORTED_MODULE_0__","CouponRequestSender","couponCode","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateActionCreator","_giftCertificateRequestSender","GiftCertificateRequestSender","giftCertificateCode","CancellablePromise","cancellable","race","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","encodeURIComponent","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","parse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","toLowerCase","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","checkout_buttons","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","onClick","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","RemoteCheckoutRequestSender","methodName","_remote_checkout_actions__WEBPACK_IMPORTED_MODULE_2__","RemoteCheckoutActionCreator","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","getDefaultLogger","isEnabled","logger","console_logger","console","noop_logger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 183);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const gateway = this._paymentMethod.initializationData.gateway;\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        if (!gateway) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.gateway\" argument is not provided.');\n        }\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(gateway)))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId: gateway, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayPaymentStrategy, GooglePayStripeInitializer } from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export * from './checkout-actions';\n\nexport { default as Checkout, CheckoutPayment } from './checkout';\nexport { default as CheckoutDefaultIncludes } from './checkout-default-includes';\nexport { default as CheckoutActionCreator } from './checkout-action-creator';\nexport { default as CheckoutParams } from './checkout-params';\nexport { default as checkoutReducer } from './checkout-reducer';\nexport { default as CheckoutRequestSender } from './checkout-request-sender';\nexport { default as CheckoutSelector } from './checkout-selector';\nexport { default as CheckoutSelectors } from './checkout-selectors';\nexport { default as CheckoutService } from './checkout-service';\nexport { default as CheckoutState } from './checkout-state';\nexport { default as CheckoutStoreErrorSelector } from './checkout-store-error-selector';\nexport { default as CheckoutStoreSelector } from './checkout-store-selector';\nexport { default as CheckoutStoreState } from './checkout-store-state';\nexport { default as CheckoutStoreStatusSelector } from './checkout-store-status-selector';\nexport { default as CheckoutStore, CheckoutStoreOptions, ReadableCheckoutStore } from './checkout-store';\nexport { default as CheckoutValidator } from './checkout-validator';\nexport { default as InternalCheckoutSelectors } from './internal-checkout-selectors';\n\nexport { default as createActionTransformer } from './create-action-transformer';\nexport { default as createCheckoutService } from './create-checkout-service';\nexport { default as createCheckoutStore } from './create-checkout-store';\nexport { default as createCheckoutSelectors } from './create-checkout-selectors';\nexport { default as createInternalCheckoutSelectors } from './create-internal-checkout-selectors';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}:${options.containerId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return actions.request.post('/api/storefront/paypal-payment/', { merchantId })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    return registry;\n}\n","export { default as createCheckoutButtonInitializer } from './create-checkout-button-initializer';\nexport { default as checkoutButtonReducer } from './checkout-button-reducer';\nexport { default as CheckoutButtonSelector } from './checkout-button-selector';\nexport { default as CheckoutButtonState } from './checkout-button-state';\n\nexport { CheckoutButtonOptions, CheckoutButtonInitializeOptions } from './checkout-button-options';\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import AmountTransformer from './amount-transformer';\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._attemptLogin()\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n\n                return this;\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                this._messageListener.trigger({\n                    type: EmbeddedCheckoutEventType.FrameError,\n                    payload: error,\n                });\n\n                this._loadingIndicator.hide();\n\n                throw error;\n            });\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError('Unable to embed the iframe because the container element could not be found.');\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export { default as embedCheckout } from './embed-checkout';\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CHECKOUT_DEFAULT_INCLUDES.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CHECKOUT_DEFAULT_INCLUDES.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n\nexport const PAYMENT_ERROR_CODES = [\n    'payment',\n    'transaction_declined',\n];\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse, { PAYMENT_ERROR_CODES } from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && PAYMENT_ERROR_CODES.indexOf(error.code) !== -1) {\n            return 'payment';\n        }\n\n        return error && error.code ? error.code : 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: LoadCountriesAction\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: InstrumentAction\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","module.exports = require(\"iframe-resizer\");","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: LoadShippingCountriesAction\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError} from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\n\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: K): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n\n        this._messagePoster.post(message);\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}