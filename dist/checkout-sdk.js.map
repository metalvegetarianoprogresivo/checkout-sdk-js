{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-types.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/payment/instrument/instrument-action-types.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-action-types.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-types.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-braintree-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","PaymentStrategyActionType","ShippingStrategyActionType","CustomerStrategyActionType","CouponActionType","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","INITIALIZE_REMOTE_BILLING_REQUESTED","INITIALIZE_REMOTE_BILLING_SUCCEEDED","INITIALIZE_REMOTE_BILLING_FAILED","INITIALIZE_REMOTE_SHIPPING_REQUESTED","INITIALIZE_REMOTE_SHIPPING_SUCCEEDED","INITIALIZE_REMOTE_SHIPPING_FAILED","INITIALIZE_REMOTE_PAYMENT_REQUESTED","INITIALIZE_REMOTE_PAYMENT_SUCCEEDED","INITIALIZE_REMOTE_PAYMENT_FAILED","LOAD_REMOTE_SETTINGS_REQUESTED","LOAD_REMOTE_SETTINGS_SUCCEEDED","LOAD_REMOTE_SETTINGS_FAILED","SIGN_OUT_REMOTE_CUSTOMER_REQUESTED","SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED","SIGN_OUT_REMOTE_CUSTOMER_FAILED","UPDATE_REMOTE_CHECKOUT","LOAD_INSTRUMENTS_REQUESTED","LOAD_INSTRUMENTS_SUCCEEDED","LOAD_INSTRUMENTS_FAILED","DELETE_INSTRUMENT_REQUESTED","DELETE_INSTRUMENT_SUCCEEDED","DELETE_INSTRUMENT_FAILED","CheckoutButtonActionType","ContentType","__webpack_exports__","CardBrand","DigitalWalletType","CountryActionCreator","_countryRequestSender","this","loadCountries","options","_this","Observable_","observer","next","data_store_","country_action_types","then","response","body","data","complete","catch","error","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","_super","PaymentArgumentInvalidError","invalidFields","message","join","external_tslib_","invalid_argument_error","PaymentStrategy","_store","_isInitialized","finalize","Promise","reject","order_finalization_not_required_error","initialize","resolve","getState","deinitialize","AfterpayPaymentStrategy","store","_checkoutValidator","_orderActionCreator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","state","paymentMethod","paymentMethods","getPaymentMethod","methodId","gatewayId","config","getStoreConfig","storeCountryName","storeProfile","storeCountry","missing_data_error","MissingPaymentMethod","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","undefined","execute","payload","paymentId","payment","payment_argument_invalid_error","useStoreCredit","dispatch","initializePayment","validate","checkout","getCheckout","loadPaymentMethod","_displayModal","loadSettings","getPaymentId","getContextConfig","afterpay","remoteCheckout","MissingCheckout","token","MissingCheckoutConfig","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","providerId","paymentData","nonce","submitOrder","submitPayment","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","type","_getMerchantId","merchantId","container","onError","external_lodash_","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","id","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","address","billingAddress","getBillingAddress","internalBillingAddress","map_to_internal_address","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","order","PaymentMethodCancelledError","standard_error","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","grandTotal","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","_shouldSubmitFullPayload","initializeOffsitePayment","getOrder","status","getPaymentStatus","payment_status_types","finalizeOrder","orderId","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","assign","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getNonceInstrument","initializationData","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","widgetInteraction","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","storeConfig","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","String","subtotal","pending","post","Accept","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","isPaymentDataRequired","_preparePaymentData","_isUsingVaulting","instrument","card","is_vaulted_instrument","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","Boolean","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","method","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","Error","handleSuccess","shippingAddress","getShippingAddress","GooglePayPaymentStrategy","_googlePayInitializer","_googlePayPaymentProcessor","_methodId","googlepay","_googlePayOptions","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","teardown","_getPayment","subtype","MissingPayment","displayWallet","_createOrder","parseResponse","tokenizePayload","cardInfo","cardInformation","card_information","_postForm","postPaymentData","details","payment_type","_getCardInformation","updateBillingAddress","cardType","number","lastFour","event","preventDefault","bind_decorator","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","request","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","creditCard","streetAddress","address1","address2","cardholderName","cvv","ccCvv","expirationDate","country","endpoint","ChasePayEventType","ChasePayPaymentStrategy","_chasePayScriptLoader","_walletEvent$","external_rxjs_","chasepay","_configureWallet","removeEventListener","_chasePayClient","_displayWallet","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","take","merchantRequestId","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","KlarnaScriptLoader","Klarna","Credit","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","braintreeSdkCreator","checkoutRequestSender","checkout_request_sender","checkoutValidator","consignment_request_sender","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","billing_address_action_creator","billing_address_request_sender","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","chasepay_payment_strategy","chasepay_script_loader","wepay_risk_client","googlepay_payment_strategy","googlepay_braintree_initializer","googlepay_payment_processor","googlepay_script_loader","shipping_strategy_action_creator","create_shipping_strategy_registry","wepay_payment_strategy","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_action_types","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","authToken","vaultAccessToken","deleteInstrument","instrumentId","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","meta","instruments","getInstrumentsMeta","getVaultAccessToken","expires_at","cart","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","_transformResponse","vaulted_instruments","vaultedInstruments","_transformVaultedInstruments","transformErrorResponse","map","bigpayToken","bigpay_token","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","statusText","InstrumentRequestSender","_client","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","consignments","_countries","countries","_coupons","coupons","_customer","customer","_form","form","_giftCertificates","giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","geoCountryCode","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","getConsignments","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","getCustomer","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","statuses","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","input","split","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","loadCheckout","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","create_checkout_store","create_payment_client","orderRequestSender","checkout_service","consignment_action_creator","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","ConfigActionType","LOAD_COUNTRIES_REQUESTED","LOAD_COUNTRIES_SUCCEEDED","LOAD_COUNTRIES_FAILED","LOAD_SHIPPING_COUNTRIES_REQUESTED","LOAD_SHIPPING_COUNTRIES_SUCCEEDED","LOAD_SHIPPING_COUNTRIES_FAILED","PaymentActionType","ACKNOWLEDGE","FINALIZE","HOSTED","OFFLINE","mapToInternalLineItems","itemMap","decimalPlaces","idKey","keys","reduce","result","item","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","DEFAULT_STATE","standard_error_StandardError","StandardError","setPrototypeOf","__proto__","_newTarget","captureStackTrace","stack","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","checkout_button_error_selector","checkout_button_status_selector","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","concat_","of_","checkout_button_actions","InitializeButtonRequested","defer_","InitializeButtonSucceeded","pipe","operators_","throw_error_action","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","CheckoutButtonStrategy","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","Button","render","env","commit","shouldProcessPayment","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","checkout_button_strategy","GooglePayBraintreeButtonStrategy","_googlePayScriptLoader","googlepaybraintree","_onPaymentSelectComplete","_onError","googleClientOptions","googleSDK","_createGooglePayButton","googlePayButton","payments","api","PaymentsClient","createButton","onClick","e","buttonType","querySelector","appendChild","params","fromGooglePay","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","registry_registry","paymentRequestSender","googlepayScriptLoader","braintree_paypal_button_strategy","googlepay_braintree_button_strategy","createCheckoutButtonRegistry","CheckoutActionType","OrderActionType","DEFAULT_PARAMS","include","ConsignmentRequestSender","checkoutId","url","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","JsonV1","tslib__WEBPACK_IMPORTED_MODULE_0__","put","delete","mapGiftCertificateToInternalLineItem","amountTransformer","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","productId","option","addedByPromotion","CacheKeyResolver","_lastId","_maps","getKey","args","_resolveMap","index","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","push","CartChangedError","checkout_validator_CheckoutValidator","CheckoutValidator","_checkoutRequestSender","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","isEqual","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","CustomerActionType","isVaultedInstrument","mapToInternalCart","amount_transformer","items","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotions","notifications","forEach","promotion","banners","banner","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","required","physicalItems","lineItem","isShippingRequired","storeCredit","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","createError","DEFAULT_RESPONSE","RequestError","Array","isArray","joinErrors","detail","title","CheckoutButtonSelector","lodash__WEBPACK_IMPORTED_MODULE_1__","initializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","checkoutButtonReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","errorsReducer","statusesReducer","reducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","getConsignmentByAddress","_createOrUpdateConsignment","_combineLineItems","rxjs_Observable__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_5__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","LoadShippingOptionsRequested","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","lodash__WEBPACK_IMPORTED_MODULE_2__","lineItemIds","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","dataReducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","BillingAddressSelector","continueAsGuestError","createFreezeProxy","target","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","charAt","createProxy","ConfigSelector","getExternalSource","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","default","fieldType","itemtype","subdivisions","hasPostalCodes","CountrySelector","PaymentSelector","internalPayment","_getInternalPayment","gateway","_getHostedPayment","_getGatewayPayment","step","getPaymentToken","getOrderMeta","providerType","payment_method_types","PaymentMethodSelector","getPaymentMethodsMeta","loadMethodId","loadMethodError","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","billing_address_selector","cart_selector","checkout_button_selector","config_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","payment_selector","createFreezeProxies","objectA","objectB","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keyFilter","keysA","keysB","length_2","isObjectEqual","selectorDecorator","decoratedTarget","class_1","descriptor","getOwnPropertyDescriptor","resolver","cache_key_resolver","memoizedMethod","cachedValue","newValue","is_private","cache","set","selectorMethodDecorator","CheckoutRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","CheckoutActionCreator","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_4__","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","_checkout_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_common_error__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_8__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","BraintreeScriptLoader","loadClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePaymentComponent","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","indexOf","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","amazon_pay_shipping_strategy","default_shipping_strategy","ButtonType","ButtonColor","googlepay_payment_processor_GooglePayPaymentProcessor","GooglePayPaymentProcessor","_googlePaymentsClient","buttonColor","short","companyName","address3","address4","address5","locality","administrativeArea","phoneNumber","mapGooglePayAddressToRequestAddress","remoteBillingAddress","googlePayAddressMapped","_mapGooglePayAddressToRequestAddress","_googlePaymentDataRequest","isReadyToPay","allowedPaymentMethods","loadPaymentData","err","statusCode","hasShippingAddress","googlePay","googlePayPaymentDataRequest","_getGooglePaymentsClient","google","mapToInternalOrder","orderMeta","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","lodash__WEBPACK_IMPORTED_MODULE_0__","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderToken","callbackUrl","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","find","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","ShippingStrategyActionCreator","_strategyRegistry","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","mergedOptions","InitializeRequested","InitializeSucceeded","InitializeFailed","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","_getType","billingAddressReducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","LoadPaymentMethodSucceeded","array","predicate","newArray","mergeOrPush","LoadPaymentMethodsSucceeded","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodFailed","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","deinitializeMethodId","ExecuteRequested","ExecuteSucceeded","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","FinalizeFailed","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_action_types","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","isPrivate","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","getShippingOption","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","isAddressEqual","addressA","addressB","normalize","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_3__","SignOutCustomerSucceeded","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_action_types__WEBPACK_IMPORTED_MODULE_2__","OrderRequestSender","OrderActionCreator","_orderRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_order_actions__WEBPACK_IMPORTED_MODULE_10__","loadOrderPayments","loadCurrentOrder","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","cartAmount","giftWrapping","NotInitializedErrorType","NotInitializedError","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","CustomerStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","CustomerActionCreator","_customerRequestSender","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","SignInCustomerRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","SignInCustomerSucceeded","_common_error__WEBPACK_IMPORTED_MODULE_5__","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","mapFromInternalAddress","omitPrivate","omitDeep","isInternalAddressEqual","ignoredKeys","customerStrategyReducer","customer_strategy_actions","shippingStrategyReducer","PaymentMethodInvalidError","CouponActionCreator","_couponRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","PaymentActionCreator","_paymentRequestSender","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_3__","_payment_actions__WEBPACK_IMPORTED_MODULE_17__","SubmitPaymentRequested","_getPaymentRequestBody","_common_error__WEBPACK_IMPORTED_MODULE_10__","SubmitPaymentFailed","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","_common_error_errors__WEBPACK_IMPORTED_MODULE_11__","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","_customer__WEBPACK_IMPORTED_MODULE_13__","_is_vaulted_instrument__WEBPACK_IMPORTED_MODULE_16__","_common_error_errors__WEBPACK_IMPORTED_MODULE_12__","_address__WEBPACK_IMPORTED_MODULE_8__","_shipping__WEBPACK_IMPORTED_MODULE_15__","_cart__WEBPACK_IMPORTED_MODULE_9__","_order__WEBPACK_IMPORTED_MODULE_14__","quoteMeta","source","paymentMethodSelector","PaymentRequestSender","PaymentMethodActionCreator","_payment_method_actions__WEBPACK_IMPORTED_MODULE_2__","sessionHash","PaymentMethodRequestSender","X-API-INTERNAL","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","PaymentStrategyActionCreator","strategy","getByMethod","_payment_strategy_actions__WEBPACK_IMPORTED_MODULE_11__","_loadOrderPaymentsIfNeeded","_order_errors__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_empty__WEBPACK_IMPORTED_MODULE_4__","PaymentStrategyRegistry","_getToken","cacheToken","hasFactory","_payment_method_types__WEBPACK_IMPORTED_MODULE_4__","_isLegacyMethod","clientSidePaymentProviders","paymentSettings","_common_registry__WEBPACK_IMPORTED_MODULE_3__","GooglePayBraintreeInitializer","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","platformToken","googlePaymentDataRequest","merchantInfo","authJwt","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","createPaymentDataRequest","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","MasterpassScriptLoader","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","_createSignInButton","not_implemented_error","size","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","visibility","containerId","buttonClass","_insertVisaCheckoutButton","visaCheckoutButton","createElement","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","MasterpassCustomerStrategy","_masterpassScriptLoader","masterpassOptions","allowedCardTypes","cartId","Masterpass","_signInButton","parentNode","removeChild","src","DefaultCustomerStrategy","_customerActionCreator","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","masterpass_script_loader","default_customer_strategy","customer_action_creator","customer_request_sender","INTERNAL_USE_ONLY","TimeoutError","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","_bigcommerce_bigpay_client__WEBPACK_IMPORTED_MODULE_0__","createPaymentClient","setHost","bigpayBaseUrl","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_2__","ConfigRequestSender","MissingDataErrorType","MissingDataError","MissingOrderConfig","throwErrorAction","isErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_options","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","hasInstance","InvalidArgumentError","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_action_types__WEBPACK_IMPORTED_MODULE_2__","AmazonPayScriptLoader","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","setClientId","clientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","toFormUrlEncoded","encodeURIComponent","OrderFinalizationNotRequiredError","RemoteCheckoutSynchronizationError","PaypalScriptLoader","GooglePayScriptLoader","_common_error_errors_index__WEBPACK_IMPORTED_MODULE_0__","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","format","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","getEnvironment","process","NODE_ENV","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","info","debug","NoopLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","getDefaultLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","lastTwo","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 176);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"rxjs/Observable\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","export const INITIALIZE_REMOTE_BILLING_REQUESTED = 'INITIALIZE_REMOTE_BILLING_REQUESTED';\nexport const INITIALIZE_REMOTE_BILLING_SUCCEEDED = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_BILLING_FAILED = 'INITIALIZE_REMOTE_BILLING_FAILED';\n\nexport const INITIALIZE_REMOTE_SHIPPING_REQUESTED = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED';\nexport const INITIALIZE_REMOTE_SHIPPING_SUCCEEDED = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_SHIPPING_FAILED = 'INITIALIZE_REMOTE_SHIPPING_FAILED';\n\nexport const INITIALIZE_REMOTE_PAYMENT_REQUESTED = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED';\nexport const INITIALIZE_REMOTE_PAYMENT_SUCCEEDED = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED';\nexport const INITIALIZE_REMOTE_PAYMENT_FAILED = 'INITIALIZE_REMOTE_PAYMENT_FAILED';\n\nexport const LOAD_REMOTE_SETTINGS_REQUESTED = 'LOAD_REMOTE_SETTINGS_REQUESTED';\nexport const LOAD_REMOTE_SETTINGS_SUCCEEDED = 'LOAD_REMOTE_SETTINGS_SUCCEEDED';\nexport const LOAD_REMOTE_SETTINGS_FAILED = 'LOAD_REMOTE_SETTINGS_FAILED';\n\nexport const SIGN_OUT_REMOTE_CUSTOMER_REQUESTED = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_FAILED = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED';\n\nexport const UPDATE_REMOTE_CHECKOUT = 'UPDATE_REMOTE_CHECKOUT';\n","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","export const LOAD_INSTRUMENTS_REQUESTED = 'LOAD_INSTRUMENTS_REQUESTED';\nexport const LOAD_INSTRUMENTS_SUCCEEDED = 'LOAD_INSTRUMENTS_SUCCEEDED';\nexport const LOAD_INSTRUMENTS_FAILED = 'LOAD_INSTRUMENTS_FAILED';\n\nexport const DELETE_INSTRUMENT_REQUESTED = 'DELETE_INSTRUMENT_REQUESTED';\nexport const DELETE_INSTRUMENT_SUCCEEDED = 'DELETE_INSTRUMENT_SUCCEEDED';\nexport const DELETE_INSTRUMENT_FAILED = 'DELETE_INSTRUMENT_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryRequestSender from './country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(actionTypes.LOAD_COUNTRIES_REQUESTED));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        window.location.assign(redirectUrl);\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import RequestSender from '../../../../node_modules/@bigcommerce/request-sender/lib/request-sender';\nimport { BillingAddressUpdateRequestBody } from '../../../billing';\nimport CheckoutActionCreator from '../../../checkout/checkout-action-creator';\nimport CheckoutStore from '../../../checkout/checkout-store';\nimport InternalCheckoutSelectors from '../../../checkout/internal-checkout-selectors';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors/index';\nimport toFormUrlEncoded from '../../../common/http-request/to-form-url-encoded';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport {\n    OrderActionCreator,\n    OrderRequestBody\n} from '../../../order/index';\nimport RemoteCheckoutSynchronizationError from '../../../remote-checkout/errors/remote-checkout-synchronization-error';\nimport {\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentStrategyActionCreator\n} from '../../index';\nimport Payment from '../../payment';\nimport PaymentMethod from '../../payment-method';\nimport {\n    PaymentInitializeOptions,\n    PaymentRequestOptions\n} from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    GooglePaymentData, GooglePayAddress, GooglePayInitializer, PaymentSuccessPayload, TokenizePayload\n} from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentStrategy extends PaymentStrategy {\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _options!: PaymentInitializeOptions;\n    private _googlePayOptions!: GooglePayPaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _requestSender: RequestSender,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.googlepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        this._googlePayOptions = options.googlepay;\n\n        const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n       return Promise.all([\n            this._googlePayInitializer.teardown(),\n            this._googlePayPaymentProcessor.deinitialize(),\n        ])\n        .then(() => super.deinitialize(options));\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch((error: MissingDataError) => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment => {\n                return this._createOrder(payment, payload.useStoreCredit, options);\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    private _setExternalCheckoutData(paymentData: GooglePaymentData): Promise<void> {\n        return this._googlePayPaymentProcessor.parseResponse(paymentData)\n            .then((tokenizePayload: TokenizePayload) => {\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = this._googlePayOptions;\n\n                return this._paymentInstrumentSelected(tokenizePayload, paymentData.cardInfo.billingAddress)\n                    .then(() => onPaymentSelect())\n                    .catch(error => onError(error));\n            });\n    }\n\n    private _getPayment() {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.nonce) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    nonce: paymentMethod.initializationData.nonce,\n                    cardInformation: paymentMethod.initializationData.card_information,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _paymentInstrumentSelected(tokenizePayload: TokenizePayload, billingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._postForm(tokenizePayload, billingAddress);\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _postForm(postPaymentData: TokenizePayload, billingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._methodId,\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        }).then(() => {\n            if (!this._methodId) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            return Promise.all([\n                this._googlePayPaymentProcessor.updateBillingAddress(billingAddress),\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]).then(() => this._store.getState());\n        });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n        .then(paymentData => {\n            return this._setExternalCheckoutData(paymentData);\n        });\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy extends PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store);\n\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$.take(1)\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport ConsignmentActionCreator from '../shipping/consignment-action-creator';\nimport ConsignmentRequestSender from '../shipping/consignment-request-sender';\nimport createShippingStrategyRegistry from '../shipping/create-shipping-strategy-registry';\nimport ShippingStrategyActionCreator from '../shipping/shipping-strategy-action-creator';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    GooglePayPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { createBraintreePaymentProcessor, createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from './strategies/braintree';\nimport BraintreeScriptLoader from './strategies/braintree/braintree-script-loader';\nimport BraintreeSDKCreator from './strategies/braintree/braintree-sdk-creator';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { GooglePayScriptLoader } from './strategies/googlepay';\nimport GooglePayBraintreeInitializer from './strategies/googlepay/googlepay-braintree-initializer';\nimport GooglePayPaymentProcessor from './strategies/googlepay/googlepay-payment-processor';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSdkCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            new BillingAddressActionCreator(\n                new BillingAddressRequestSender(requestSender)\n            ),\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(getScriptLoader()),\n            new WepayRiskClient(scriptLoader))\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new GooglePayBraintreeInitializer(braintreeSdkCreator),\n            requestSender,\n            new GooglePayPaymentProcessor(\n                store,\n                paymentMethodActionCreator,\n                new GooglePayScriptLoader(scriptLoader),\n                new GooglePayBraintreeInitializer(braintreeSdkCreator),\n                new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n                new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n            )\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport * as actionTypes from './instrument-action-types';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_REQUESTED));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_SUCCEEDED, body, currentToken));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_INSTRUMENTS_FAILED, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_REQUESTED, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({ ...session, authToken: currentToken.vaultAccessToken }, instrumentId)\n                        .then(() => {\n                            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_SUCCEEDED, undefined, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.DELETE_INSTRUMENT_FAILED, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken()\n                .then(({ body = {} }: any) => ({\n                    vaultAccessToken: body.data.token,\n                    vaultAccessExpiry: body.data.expires_at,\n                }));\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport Instrument from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    RawInstrumentResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(response: Response<RawInstrumentsResponseBody>): Response<InstrumentsResponseBody> {\n        const payload = this._transformResponse(response);\n        const { vaulted_instruments } = payload.body;\n\n        payload.body = {\n            vaultedInstruments: this._transformVaultedInstruments(vaulted_instruments),\n        };\n\n        return payload;\n    }\n\n    transformErrorResponse(response: Response<RawInstrumentErrorResponseBody>): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: RawInstrumentResponseBody[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse({ data: body, status, statusText }: any): Response {\n        return {\n            headers: {},\n            body,\n            status,\n            statusText,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\n\nimport { InstrumentRequestContext } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    VaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessTokenResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadInstruments(requestContext: InstrumentRequestContext, shippingAddress?: Address): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(requestContext: InstrumentRequestContext, instrumentId: string): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstruments(requestContext: InstrumentRequestContext): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(requestContext, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstrumentsWithAddress(requestContext: InstrumentRequestContext, shippingAddress: Address): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender();\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","module.exports = require(\"rxjs/observable/defer\");","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","export const LOAD_COUNTRIES_REQUESTED = 'LOAD_COUNTRIES_REQUESTED';\nexport const LOAD_COUNTRIES_SUCCEEDED = 'LOAD_COUNTRIES_SUCCEEDED';\nexport const LOAD_COUNTRIES_FAILED = 'LOAD_COUNTRIES_FAILED';\n","export const LOAD_SHIPPING_COUNTRIES_REQUESTED = 'LOAD_SHIPPING_COUNTRIES_REQUESTED';\nexport const LOAD_SHIPPING_COUNTRIES_SUCCEEDED = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED';\nexport const LOAD_SHIPPING_COUNTRIES_FAILED = 'LOAD_SHIPPING_COUNTRIES_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","module.exports = require(\"rxjs/observable/from\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","module.exports = require(\"@bigcommerce/script-loader\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","module.exports = require(\"@bigcommerce/form-poster\");","import { setPrototypeOf } from '../../utility';\n\nexport default class StandardError extends Error {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     braintreepaypal: {\n     *         container: '#checkoutButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Observable<InitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n            this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, options),\n            defer(() => this._registry.get(options.methodId).initialize(options)\n                .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n        );\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize(options)\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized = false;\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, paypalOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize(options);\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { PaymentInitializeOptions, PaymentMethod } from '../../../payment';\nimport { GooglePayBraintreeSDK, GooglePayPaymentOptions, GooglePayPaymentStrategy, GooglePayScriptLoader, GooglePaySDK } from '../../../payment/strategies/googlepay';\nimport GooglePayPaymentProcessor from '../../../payment/strategies/googlepay/googlepay-payment-processor';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { GooglePayBraintreeButtonInitializeOptions } from './googlepay-braintree-button-options';\n\nexport default class GooglePayBraintreeButtonStrategy extends CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { googlepaybraintree, methodId } = options;\n\n        if (!googlepaybraintree || !methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paymentOptions: PaymentInitializeOptions = {\n            methodId,\n            googlepay: {\n                onPaymentSelect: this._onPaymentSelectComplete,\n                onError: this._onError,\n            },\n        };\n\n        const googleClientOptions: GooglePayPaymentOptions = {\n            environment: googlepaybraintree.environment || 'PRODUCTION',\n        };\n\n        return this._googlePayScriptLoader.load()\n            .then(googleSDK => this._createGooglePayButton(googleSDK, googleClientOptions, googlepaybraintree))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    private _createGooglePayButton(googleSDK: GooglePaySDK, googleClientOptions: GooglePayPaymentOptions, googlepaybraintree: GooglePayBraintreeButtonInitializeOptions): void {\n        const googleClient = new googleSDK.payments.api.PaymentsClient(googleClientOptions);\n\n        const googlePayButton = googleClient.createButton({\n            onClick: (e: Event) => this._handleWalletButtonClick(e),\n            buttonType: googlepaybraintree.buttonType,\n        });\n        const container = document.querySelector(`#${googlepaybraintree.container}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        container.appendChild(googlePayButton);\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(() => this._onPaymentSelectComplete());\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromGooglePay: true,\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error) {\n            throw new Error(error.message);\n        }\n    }\n\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender();\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { createFormPoster, FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport CheckoutValidator from '../checkout/checkout-validator';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, PaymentActionCreator, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentRequestSender, PaymentStrategyActionCreator, PaymentStrategyRegistry } from '../payment';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { GooglePayBraintreeInitializer, GooglePayPaymentStrategy, GooglePayScriptLoader } from '../payment/strategies/googlepay';\nimport GooglePayPaymentProcessor from '../payment/strategies/googlepay/googlepay-payment-processor';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport { BraintreePaypalButtonStrategy, CheckoutButtonStrategy, GooglePayBraintreeButtonStrategy } from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CheckoutButtonStrategy> {\n    const registry = new Registry<CheckoutButtonStrategy>();\n    const scriptLoader = getScriptLoader();\n    const paymentClient = createPaymentClient(store);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender)));\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(\n        new PaymentStrategyRegistry(store),\n        orderActionCreator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        paymentRequestSender,\n        orderActionCreator\n    );\n    const googlepayScriptLoader = new GooglePayScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader));\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster()\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster(),\n            true\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayBraintreeButtonStrategy(\n            store,\n            new FormPoster(),\n            googlepayScriptLoader,\n            new GooglePayPaymentProcessor(\n                store,\n                paymentMethodActionCreator,\n                new GooglePayScriptLoader(scriptLoader),\n                new GooglePayBraintreeInitializer(braintreeSDKCreator),\n                new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n                new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n            )\n        )\n    );\n\n    return registry;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: Action\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find, map } from 'lodash';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._combineLineItems(\n                    consignment,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: ['consignments.availableShippingOptions'],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _combineLineItems(\n        consignment: ConsignmentAssignmentRequestBody,\n        existingConsignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!existingConsignment) {\n            return consignment.lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const existingLineItems = map(existingConsignment.lineItemIds, itemId => {\n            const item = find(cart.lineItems.physicalItems, { id: itemId });\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        }) as ConsignmentLineItem[];\n\n        return existingLineItems.concat(consignment.lineItems);\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig()(store),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport {GooglePayCreator} from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePaymentComponent(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { GooglePayBraintreeSDK } from '../googlepay';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePaymentComponent(),\n            ])\n                .then(([client, googlePay]) => {\n                    return googlePay.create({ client });\n                });\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender)\n        )\n    );\n\n    return registry;\n}\n","import { AddressRequestBody } from '../../../address/address';\nimport { BillingAddressUpdateRequestBody } from '../../../billing/billing-address';\nimport Checkout from '../../../checkout/checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModule, BraintreeModuleCreator } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype AddressFormat = 'FULL' | 'MIN';\ntype TotalPriceStatus = 'ESTIMATED' | 'FINAL' | 'NOT_CURRENTLY_KNOWN';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\nexport const GATEWAY = { braintree: 'braintree' };\n\nexport interface GooglePayBraintreeSDK extends BraintreeModule {\n    createPaymentDataRequest(request?: GooglePayDataRequestV1): { allowedPaymentMethods: string[] } | GooglePayPaymentDataRequestV1;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayDataRequestV1 {\n    merchantInfo: {\n        authJwt?: string,\n    };\n    transactionInfo: {\n        currencyCode: string,\n        totalPriceStatus: TotalPriceStatus,\n        totalPrice: string,\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean,\n        billingAddressFormat: AddressFormat,\n    };\n    emailRequired: boolean;\n    phoneNumberRequired: boolean;\n    shippingAddressRequired: boolean;\n}\n\nexport interface GooglePayPaymentDataRequestV1 {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    enviroment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: string;\n    };\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: any;\n}\n\nexport enum ButtonType {\n    long = 'long',\n    short = 'short',\n}\nexport enum ButtonColor {\n    default = 'default',\n    black = 'black',\n    white = 'white',\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: any): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: TokenizeType;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    cardInfo: {\n        cardClass: string;\n        cardDescription: string;\n        cardDetails: string;\n        cardImageUri: string;\n        cardNetwork: string;\n        billingAddress: GooglePayAddress;\n    };\n    paymentMethodToken: {\n        token: string;\n        tokenizationType: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    address4: string;\n    address5: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface PaymentSuccessPayload {\n    email: string;\n    tokenizePayload: TokenizePayload;\n    billingAddress: GooglePayAddress;\n    shippingAddress: GooglePayAddress;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport default function mapGooglePayAddressToRequestAddress(address: GooglePayAddress, id?: string): AddressRequestBody | BillingAddressUpdateRequestBody {\n    return {\n        id,\n        firstName: address.name.split(' ').slice(0, -1).join(' '),\n        lastName: address.name.split(' ').slice(-1).join(' '),\n        company: address.companyName,\n        address1: address.address1,\n        address2: address.address2 + address.address3 + address.address4 + address.address5,\n        city: address.locality,\n        stateOrProvince: address.administrativeArea,\n        stateOrProvinceCode: address.administrativeArea,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phoneNumber,\n        customFields: [],\n    };\n}\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV1>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: any): Promise<TokenizePayload>;\n}\n","import { BillingAddressActionCreator } from '../../../billing';\nimport { BillingAddressUpdateRequestBody } from '../../../billing';\nimport CheckoutStore from '../../../checkout/checkout-store';\nimport InternalCheckoutSelectors from '../../../checkout/internal-checkout-selectors';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedErrorType,\n    StandardError\n} from '../../../common/error/errors/index';\nimport NotInitializedError from '../../../common/error/errors/not-initialized-error';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport {\n    OrderActionCreator,\n    OrderRequestBody\n} from '../../../order/index';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ShippingStrategyActionCreator from '../../../shipping/shipping-strategy-action-creator';\nimport {\n    PaymentMethodActionCreator,\n} from '../../index';\nimport PaymentMethod from '../../payment-method';\nimport {\n    PaymentInitializeOptions,\n} from '../../payment-request-options';\n\nimport {\n    default as mapGooglePayAddressToRequestAddress,\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentsError,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayIsReadyToPayResponse,\n    GooglePayPaymentDataRequestV1,\n    GooglePayPaymentOptions, GooglePaySDK,\n    PaymentSuccessPayload,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePaymentsClient!: GooglePayClient;\n    private _methodId!: string;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n    private _googlePaymentDataRequest!: GooglePayPaymentDataRequestV1;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) { }\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(): HTMLElement {\n        return this._googlePaymentsClient.createButton({\n            buttonColor: ButtonColor.default,\n            buttonType: ButtonType.short,\n            // onClick: this._handleWalletButtonClick,\n        });\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors | void> {\n        if (!this._methodId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        if (!shippingAddress) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(\n            this._shippingStrategyActionCreator.updateAddress(mapGooglePayAddressToRequestAddress(shippingAddress))\n        ).then(() => this._store.getState());\n    }\n\n    updateBillingAddress(billingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        if (!this._methodId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayAddressMapped: BillingAddressUpdateRequestBody = this._mapGooglePayAddressToRequestAddress(billingAddress, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        return new Promise((resolve, reject) => {\n            if (!this._googlePaymentsClient && !this._googlePaymentDataRequest) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._googlePaymentsClient.isReadyToPay({\n                allowedPaymentMethods: this._googlePaymentDataRequest.allowedPaymentMethods,\n            }).then( (response: GooglePayIsReadyToPayResponse) => {\n                if (response) {\n                    this._googlePaymentsClient.loadPaymentData(this._googlePaymentDataRequest)\n                        .then((paymentData: GooglePaymentData) => {\n                            resolve(paymentData);\n                        }).catch((err: GooglePaymentsError) => {\n                            reject(new Error(err.statusCode));\n                        });\n                }\n            });\n        });\n    }\n\n    parseResponse(paymentData: any): Promise<TokenizePayload> {\n        return this._googlePayInitializer.parseResponse(paymentData);\n    }\n\n    private _configureWallet(): Promise<void> {\n        if (!this._methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n                const storeConfig = state.config.getStoreConfig();\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                this._paymentMethod = paymentMethod;\n                const testMode = paymentMethod.config.testMode;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ])\n                    .then(([googlePay, googlePayPaymentDataRequest]) => {\n                        this._googlePaymentsClient = this._getGooglePaymentsClient(googlePay, testMode);\n                        this._googlePaymentDataRequest = googlePayPaymentDataRequest;\n                    })\n                    .catch((error: Error) => {\n                        this._handleError(error);\n                    });\n            });\n    }\n\n    private _getGooglePaymentsClient(google: GooglePaySDK, testMode: boolean | undefined): GooglePayClient {\n        let environment: EnvironmentType;\n        testMode = true; // TODO: remove when push this code to final review\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!testMode) {\n            environment = 'PRODUCTION';\n        } else {\n            environment = 'TEST';\n        }\n\n        const options: GooglePayPaymentOptions = { environment };\n\n        return new google.payments.api.PaymentsClient(options) as GooglePayClient;\n    }\n\n    private _handleError(error: Error): never {\n        throw new StandardError(error.message);\n    }\n\n    private _mapGooglePayAddressToRequestAddress(address: GooglePayAddress, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3 + address.address4 + address.address5,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function countryReducer(state: CountryState = DEFAULT_STATE, action: Action): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: CountryErrorsState = DEFAULT_STATE.errors, action: Action): CountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: CountryStatusesState = DEFAULT_STATE.statuses, action: Action): CountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T extends object>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport * as actionTypes from './instrument-action-types';\n\nimport Instrument from './instrument';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(state: InstrumentState = DEFAULT_STATE, action: Action): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Instrument[] = DEFAULT_STATE.data, action: Action): Instrument[] {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return action.payload.vaultedInstruments || [];\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: InstrumentMeta | undefined, action: Action): InstrumentMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: InstrumentErrorState = DEFAULT_STATE.errors, action: Action): InstrumentErrorState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: InstrumentStatusState = DEFAULT_STATE.statuses, action: Action): InstrumentStatusState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\ntype RemoteCheckout = AfterpayRemoteCheckout | AmazonPayRemoteCheckout;\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: Action\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = {},\n    action: Action\n): RemoteCheckout {\n    switch (action.type) {\n    case actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED:\n        return { ...data, billing: action.payload.billing };\n\n    case actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED:\n        return { ...data, shipping: action.payload.shipping };\n\n    case actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED:\n        return { ...data, settings: action.payload };\n\n    case actionTypes.UPDATE_REMOTE_CHECKOUT:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function shippingCountryReducer(state: ShippingCountryState = DEFAULT_STATE, action: Action): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: ShippingCountryErrorsState = DEFAULT_STATE.errors, action: Action): ShippingCountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses, action: Action): ShippingCountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","module.exports = require(\"rxjs/observable/merge\");","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","module.exports = require(\"rxjs/observable/empty\");","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this.hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import Checkout from '../../../checkout/checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport BraintreeSDKCreator from '../braintree/braintree-sdk-creator';\n\nimport {\n    GooglePaymentData,\n    GooglePayDataRequestV1,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV1,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeSDK } from './index';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean): Promise<GooglePayPaymentDataRequestV1> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    googleBraintreePaymentInstance,\n                    checkout,\n                    paymentMethod.initializationData.platformToken,\n                    hasShippingAddress);\n            }).catch((error: Error) => {\n                throw new StandardError(error.message);\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        return this._googlePaymentInstance.parseResponse(paymentData);\n    }\n\n    private _createGooglePayPayload(googleBraintreePaymentInstance: GooglePayBraintreeSDK,\n                                    checkout: Checkout,\n                                    platformToken: string,\n                                    hasShippingAddress: boolean): GooglePayPaymentDataRequestV1 {\n        if (!platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePaymentDataRequest: GooglePayDataRequestV1 = {\n            merchantInfo: {\n                authJwt: platformToken,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: checkout.grandTotal.toString(),\n            },\n            cardRequirements: {\n                // We recommend collecting billing address information, at minimum\n                // billing postal code, and passing that billing postal code with all\n                // Google Pay transactions as a best practice.\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return googleBraintreePaymentInstance.createPaymentDataRequest(googlePaymentDataRequest) as GooglePayPaymentDataRequestV1;\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { Masterpass, MasterpassHostWindow } from '../masterpass/masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { MasterpassScriptLoader } from '../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class MasterpassCustomerStrategy extends CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport BillingAddressActionCreator from '../billing/billing-address-action-creator';\nimport BillingAddressRequestSender from '../billing/billing-address-request-sender';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, PaymentActionCreator, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentRequestSender, PaymentStrategyActionCreator, PaymentStrategyRegistry } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createBraintreeVisaCheckoutPaymentProcessor, BraintreeScriptLoader, BraintreeSDKCreator, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport GooglePayBraintreeInitializer from '../payment/strategies/googlepay/googlepay-braintree-initializer';\nimport GooglePayScriptLoader from '../payment/strategies/googlepay/googlepay-script-loader';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport ConsignmentActionCreator from '../shipping/consignment-action-creator';\nimport ConsignmentRequestSender from '../shipping/consignment-request-sender';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n    MasterpassCustomerStrategy,\n} from './strategies';\nimport GooglePayBraintreeCustomerStrategy from './strategies/googlepay-braintree-customer-strategy';\nimport SquareCustomerStrategy from './strategies/square-customer-strategy';\nimport GooglePayPaymentProcessor from '../payment/strategies/googlepay/googlepay-payment-processor';\nimport ShippingStrategyActionCreator from '../shipping/shipping-strategy-action-creator';\nimport createShippingStrategyRegistry from '../shipping/create-shipping-strategy-registry';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSdkCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(createPaymentClient(store)),\n        orderActionCreator\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    // registry.register('googlepaybraintree', () =>\n    //     new GooglePayBraintreeCustomerStrategy(\n    //         store,\n    //         remoteCheckoutActionCreator,\n    //         new GooglePayPaymentProcessor(\n    //             store,\n    //             paymentMethodActionCreator,\n    //             new GooglePayScriptLoader(scriptLoader),\n    //             new GooglePayBraintreeInitializer(braintreeSdkCreator),\n    //             new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n    //             new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    //         )\n    //     )\n    // );\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token: string = this._options.defaultToken, cacheToken: string = token): T {\n        try {\n            return this._getInstance(token, cacheToken);\n        } catch (error) {\n            return this._getInstance(this._options.defaultToken, cacheToken);\n        }\n    }\n\n    register(token: string, factory: Factory<T>): void {\n        if (this.hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this.hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_BILLING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_REMOTE_SETTINGS_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(actionTypes.UPDATE_REMOTE_CHECKOUT, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"rxjs\");","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors/index';\n\nimport {\n    GooglePayHostWindow,\n    GooglePaySDK\n} from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","module.exports = require(\"messageformat\");","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}