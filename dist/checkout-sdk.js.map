{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-types.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/payment/instrument/instrument-action-types.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-action-types.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-types.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-braintree-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay-braintree-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","PaymentStrategyActionType","ShippingStrategyActionType","CustomerStrategyActionType","CouponActionType","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","INITIALIZE_REMOTE_BILLING_REQUESTED","INITIALIZE_REMOTE_BILLING_SUCCEEDED","INITIALIZE_REMOTE_BILLING_FAILED","INITIALIZE_REMOTE_SHIPPING_REQUESTED","INITIALIZE_REMOTE_SHIPPING_SUCCEEDED","INITIALIZE_REMOTE_SHIPPING_FAILED","INITIALIZE_REMOTE_PAYMENT_REQUESTED","INITIALIZE_REMOTE_PAYMENT_SUCCEEDED","INITIALIZE_REMOTE_PAYMENT_FAILED","LOAD_REMOTE_SETTINGS_REQUESTED","LOAD_REMOTE_SETTINGS_SUCCEEDED","LOAD_REMOTE_SETTINGS_FAILED","SIGN_OUT_REMOTE_CUSTOMER_REQUESTED","SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED","SIGN_OUT_REMOTE_CUSTOMER_FAILED","UPDATE_REMOTE_CHECKOUT","LOAD_INSTRUMENTS_REQUESTED","LOAD_INSTRUMENTS_SUCCEEDED","LOAD_INSTRUMENTS_FAILED","DELETE_INSTRUMENT_REQUESTED","DELETE_INSTRUMENT_SUCCEEDED","DELETE_INSTRUMENT_FAILED","CheckoutButtonActionType","ContentType","__webpack_exports__","CardBrand","DigitalWalletType","CountryActionCreator","_countryRequestSender","this","loadCountries","options","_this","Observable_","observer","next","data_store_","country_action_types","then","response","body","data","complete","catch","error","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","_super","PaymentArgumentInvalidError","invalidFields","message","join","external_tslib_","invalid_argument_error","PaymentStrategy","_store","_isInitialized","finalize","Promise","reject","order_finalization_not_required_error","initialize","resolve","getState","deinitialize","AfterpayPaymentStrategy","store","_checkoutValidator","_orderActionCreator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","state","paymentMethod","paymentMethods","getPaymentMethod","methodId","gatewayId","config","getStoreConfig","storeCountryName","storeProfile","storeCountry","missing_data_error","MissingPaymentMethod","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","undefined","execute","payload","paymentId","payment","payment_argument_invalid_error","useStoreCredit","dispatch","initializePayment","validate","checkout","getCheckout","loadPaymentMethod","_displayModal","loadSettings","getPaymentId","getContextConfig","afterpay","remoteCheckout","MissingCheckout","token","MissingCheckoutConfig","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","providerId","paymentData","nonce","submitOrder","submitPayment","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","type","_getMerchantId","merchantId","container","onError","external_lodash_","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","id","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","address","billingAddress","getBillingAddress","internalBillingAddress","map_to_internal_address","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","order","PaymentMethodCancelledError","standard_error","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","grandTotal","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","initializeOffsitePayment","getOrder","status","getPaymentStatus","payment_status_types","finalizeOrder","orderId","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","assign","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getNonceInstrument","initializationData","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","widgetInteraction","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","storeConfig","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","String","subtotal","pending","post","Accept","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","isPaymentDataRequired","_preparePaymentData","_isUsingVaulting","instrument","card","is_vaulted_instrument","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","Boolean","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","method","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","Error","handleSuccess","shippingAddress","getShippingAddress","GooglePayPaymentStrategy","_googlePayInitializer","_googlePayPaymentProcessor","_methodId","googlepay","_googlePayOptions","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","removeEventListener","teardown","_createOrder","_getPayment","updateBillingAddress","cardInfo","MissingPayment","cardInformation","card_information","event","preventDefault","displayWallet","bind_decorator","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","request","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","country","endpoint","ChasePayEventType","ChasePayPaymentStrategy","_chasePayScriptLoader","_walletEvent$","external_rxjs_","chasepay","_configureWallet","_chasePayClient","subtype","_displayWallet","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","take","merchantRequestId","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","KlarnaScriptLoader","Klarna","Credit","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","braintreeSdkCreator","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","billing_address_action_creator","billing_address_request_sender","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","chasepay_payment_strategy","chasepay_script_loader","wepay_risk_client","googlepay_payment_strategy","googlepay_braintree_initializer","googlepay_payment_processor","googlepay_script_loader","shipping_strategy_action_creator","create_shipping_strategy_registry","wepay_payment_strategy","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_action_types","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","authToken","vaultAccessToken","deleteInstrument","instrumentId","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","meta","instruments","getInstrumentsMeta","getVaultAccessToken","expires_at","cart","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","_transformResponse","vaulted_instruments","vaultedInstruments","_transformVaultedInstruments","transformErrorResponse","map","bigpayToken","bigpay_token","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","statusText","InstrumentRequestSender","_client","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","consignments","_countries","countries","_coupons","coupons","_customer","customer","_form","form","_giftCertificates","giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","geoCountryCode","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","getConsignments","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","getCustomer","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","statuses","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","input","split","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","loadCheckout","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","shouldWarnMutation","request_sender_","create_checkout_store","create_payment_client","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","ConfigActionType","LOAD_COUNTRIES_REQUESTED","LOAD_COUNTRIES_SUCCEEDED","LOAD_COUNTRIES_FAILED","LOAD_SHIPPING_COUNTRIES_REQUESTED","LOAD_SHIPPING_COUNTRIES_SUCCEEDED","LOAD_SHIPPING_COUNTRIES_FAILED","PaymentActionType","ACKNOWLEDGE","FINALIZE","HOSTED","OFFLINE","standard_error_StandardError","StandardError","setPrototypeOf","__proto__","_newTarget","captureStackTrace","stack","CheckoutActionType","OrderActionType","mapToInternalLineItems","itemMap","decimalPlaces","idKey","keys","reduce","result","item","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","CartChangedError","checkout_validator_CheckoutValidator","CheckoutValidator","_checkoutRequestSender","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","isEqual","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","DEFAULT_STATE","CustomerActionType","mapGiftCertificateToInternalLineItem","amountTransformer","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","productId","option","addedByPromotion","CacheKeyResolver","_lastId","_maps","getKey","args","_resolveMap","index","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","push","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","checkout_button_error_selector","checkout_button_status_selector","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","concat_","of_","checkout_button_actions","InitializeButtonRequested","defer_","InitializeButtonSucceeded","pipe","operators_","throw_error_action","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","CheckoutButtonStrategy","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","Button","render","env","commit","shouldProcessPayment","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","checkout_button_strategy","GooglePayBraintreeButtonStrategy","_googlePayScriptLoader","googlepaybraintree","stateCheckout","_createSignInButton","containerId","querySelector","googlePayButton","createButton","_onPaymentSelectComplete","appendChild","_createGooglePayButton","googleClientOptions","googleSDK","payments","api","PaymentsClient","_handleWalletButtonClicked","_onError","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","registry_registry","paymentRequestSender","googlepayScriptLoader","braintree_paypal_button_strategy","googlepay_braintree_button_strategy","createCheckoutButtonRegistry","isVaultedInstrument","mapToInternalCart","amount_transformer","items","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotions","notifications","forEach","promotion","banners","banner","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","required","physicalItems","lineItem","isShippingRequired","storeCredit","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","tslib__WEBPACK_IMPORTED_MODULE_0__","createError","DEFAULT_RESPONSE","RequestError","Array","isArray","joinErrors","detail","title","CheckoutButtonSelector","lodash__WEBPACK_IMPORTED_MODULE_1__","initializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","getConsignmentByAddress","_createOrUpdateConsignment","_combineLineItems","rxjs_Observable__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_5__","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","params","include","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","lineItemIds","DEFAULT_PARAMS","ConsignmentRequestSender","checkoutId","url","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","JsonV1","put","delete","BillingAddressSelector","continueAsGuestError","createFreezeProxy","target","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","charAt","createProxy","ConfigSelector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","default","fieldType","itemtype","subdivisions","hasPostalCodes","CountrySelector","PaymentSelector","internalPayment","_getInternalPayment","gateway","_getHostedPayment","_getGatewayPayment","step","getPaymentToken","getOrderMeta","providerType","payment_method_types","PaymentMethodSelector","getPaymentMethodsMeta","loadMethodId","loadMethodError","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","billing_address_selector","cart_selector","checkout_button_selector","config_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","payment_selector","createFreezeProxies","objectA","objectB","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keyFilter","keysA","keysB","length_2","isObjectEqual","selectorDecorator","decoratedTarget","class_1","descriptor","getOwnPropertyDescriptor","resolver","cache_key_resolver","memoizedMethod","cachedValue","newValue","is_private","cache","set","selectorMethodDecorator","CheckoutRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","CheckoutActionCreator","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_4__","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","_checkout_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_common_error__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_8__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","indexOf","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","orderMeta","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","lodash__WEBPACK_IMPORTED_MODULE_0__","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderToken","callbackUrl","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","find","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","_getType","billingAddressReducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","LoadPaymentMethodSucceeded","array","predicate","newArray","mergeOrPush","LoadPaymentMethodsSucceeded","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodFailed","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","InitializeRequested","InitializeSucceeded","InitializeFailed","DeinitializeRequested","DeinitializeSucceeded","deinitializeMethodId","DeinitializeFailed","ExecuteRequested","ExecuteSucceeded","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","FinalizeFailed","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_action_types","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","isPrivate","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","getShippingOption","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","isAddressEqual","addressA","addressB","normalize","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_3__","SignOutCustomerSucceeded","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_action_types__WEBPACK_IMPORTED_MODULE_2__","OrderRequestSender","OrderActionCreator","_orderRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_order_actions__WEBPACK_IMPORTED_MODULE_10__","loadOrderPayments","loadCurrentOrder","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","cartAmount","giftWrapping","BraintreeScriptLoader","loadClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","toFormUrlEncoded","encodeURIComponent","ShippingStrategyActionCreator","_strategyRegistry","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","mergedOptions","mapFromInternalAddress","INTERNAL_USE_ONLY","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy_actions","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","amazon_pay_shipping_strategy","default_shipping_strategy","omitPrivate","omitDeep","isInternalAddressEqual","ignoredKeys","customerStrategyReducer","customer_strategy_actions","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","shippingStrategyReducer","ButtonType","ButtonColor","googlepay_payment_processor_GooglePayPaymentProcessor","GooglePayPaymentProcessor","onClick","buttonType","buttonColor","Short","Default","_googlePaymentsClient","remoteBillingAddress","googlePayAddressMapped","_mapGooglePayAddressToBillingAddress","_mapGooglePayAddressToShippingAddress","_googlePaymentDataRequest","isReadyToPay","allowedPaymentMethods","loadPaymentData","err","statusCode","parseResponse","tokenizedPayload","_postForm","hasShippingAddress","googlePay","googlePayPaymentDataRequest","_getGooglePaymentsClient","_getCardInformation","cardType","lastFour","google","companyName","address3","address4","address5","locality","administrativeArea","phoneNumber","postPaymentData","PaymentMethodInvalidError","CouponActionCreator","_couponRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","CustomerStrategyActionCreator","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","CustomerActionCreator","_customerRequestSender","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","SignInCustomerRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","SignInCustomerSucceeded","_common_error__WEBPACK_IMPORTED_MODULE_5__","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","MasterpassScriptLoader","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","size","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","visibility","buttonClass","_insertVisaCheckoutButton","visaCheckoutButton","createElement","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","SquareCustomerStrategy","MasterpassCustomerStrategy","_masterpassScriptLoader","masterpassOptions","allowedCardTypes","cartId","Masterpass","_signInButton","parentNode","removeChild","src","GooglePayBraintreeCustomerStrategy","DefaultCustomerStrategy","_customerActionCreator","createCustomerStrategyRegistry","formPoster","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","masterpass_script_loader","googlepay_braintree_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","TimeoutError","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","_bigcommerce_bigpay_client__WEBPACK_IMPORTED_MODULE_0__","createPaymentClient","setHost","paymentSettings","bigpayBaseUrl","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_2__","ConfigRequestSender","X-API-INTERNAL","MissingDataErrorType","MissingDataError","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","throwErrorAction","isErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","NotInitializedErrorType","NotInitializedError","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_options","cacheToken","_getInstance","hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","hasInstance","InvalidArgumentError","PaymentMethodActionCreator","_payment_method_actions__WEBPACK_IMPORTED_MODULE_2__","sessionHash","PaymentMethodRequestSender","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_action_types__WEBPACK_IMPORTED_MODULE_2__","AmazonPayScriptLoader","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","setClientId","clientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","RemoteCheckoutSynchronizationError","GooglePayScriptLoader","GooglePayBraintreeInitializer","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","platformToken","googlePaymentDataRequest","merchantInfo","authJwt","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","createPaymentDataRequest","PaymentStrategyActionCreator","strategy","getByMethod","_payment_strategy_actions__WEBPACK_IMPORTED_MODULE_11__","_loadOrderPaymentsIfNeeded","_order_errors__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_empty__WEBPACK_IMPORTED_MODULE_4__","OrderFinalizationNotRequiredError","PaymentStrategyRegistry","_getToken","_payment_method_types__WEBPACK_IMPORTED_MODULE_4__","_isLegacyMethod","clientSidePaymentProviders","_common_registry__WEBPACK_IMPORTED_MODULE_3__","PaymentActionCreator","_paymentRequestSender","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_3__","_payment_actions__WEBPACK_IMPORTED_MODULE_17__","SubmitPaymentRequested","_getPaymentRequestBody","_common_error__WEBPACK_IMPORTED_MODULE_10__","SubmitPaymentFailed","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","_common_error_errors__WEBPACK_IMPORTED_MODULE_11__","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","_customer__WEBPACK_IMPORTED_MODULE_13__","_is_vaulted_instrument__WEBPACK_IMPORTED_MODULE_16__","_common_error_errors__WEBPACK_IMPORTED_MODULE_12__","_address__WEBPACK_IMPORTED_MODULE_8__","_shipping__WEBPACK_IMPORTED_MODULE_15__","_cart__WEBPACK_IMPORTED_MODULE_9__","_order__WEBPACK_IMPORTED_MODULE_14__","quoteMeta","source","paymentMethodSelector","PaymentRequestSender","PaypalScriptLoader","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","format","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","getEnvironment","process","NODE_ENV","e","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","info","debug","NoopLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","getDefaultLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","lastTwo","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 177);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"rxjs/Observable\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","export const INITIALIZE_REMOTE_BILLING_REQUESTED = 'INITIALIZE_REMOTE_BILLING_REQUESTED';\nexport const INITIALIZE_REMOTE_BILLING_SUCCEEDED = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_BILLING_FAILED = 'INITIALIZE_REMOTE_BILLING_FAILED';\n\nexport const INITIALIZE_REMOTE_SHIPPING_REQUESTED = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED';\nexport const INITIALIZE_REMOTE_SHIPPING_SUCCEEDED = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_SHIPPING_FAILED = 'INITIALIZE_REMOTE_SHIPPING_FAILED';\n\nexport const INITIALIZE_REMOTE_PAYMENT_REQUESTED = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED';\nexport const INITIALIZE_REMOTE_PAYMENT_SUCCEEDED = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED';\nexport const INITIALIZE_REMOTE_PAYMENT_FAILED = 'INITIALIZE_REMOTE_PAYMENT_FAILED';\n\nexport const LOAD_REMOTE_SETTINGS_REQUESTED = 'LOAD_REMOTE_SETTINGS_REQUESTED';\nexport const LOAD_REMOTE_SETTINGS_SUCCEEDED = 'LOAD_REMOTE_SETTINGS_SUCCEEDED';\nexport const LOAD_REMOTE_SETTINGS_FAILED = 'LOAD_REMOTE_SETTINGS_FAILED';\n\nexport const SIGN_OUT_REMOTE_CUSTOMER_REQUESTED = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_FAILED = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED';\n\nexport const UPDATE_REMOTE_CHECKOUT = 'UPDATE_REMOTE_CHECKOUT';\n","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","export const LOAD_INSTRUMENTS_REQUESTED = 'LOAD_INSTRUMENTS_REQUESTED';\nexport const LOAD_INSTRUMENTS_SUCCEEDED = 'LOAD_INSTRUMENTS_SUCCEEDED';\nexport const LOAD_INSTRUMENTS_FAILED = 'LOAD_INSTRUMENTS_FAILED';\n\nexport const DELETE_INSTRUMENT_REQUESTED = 'DELETE_INSTRUMENT_REQUESTED';\nexport const DELETE_INSTRUMENT_SUCCEEDED = 'DELETE_INSTRUMENT_SUCCEEDED';\nexport const DELETE_INSTRUMENT_FAILED = 'DELETE_INSTRUMENT_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryRequestSender from './country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(actionTypes.LOAD_COUNTRIES_REQUESTED));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = payment && payment.gatewayId === 'adyen' ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        window.location.assign(redirectUrl);\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { PaymentStrategy } from '../';\nimport {\n    Payment,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotInitializedError } from '../../../common/error/errors';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport {\n    OrderActionCreator, OrderRequestBody } from '../../../order';\n\nimport { GooglePayPaymentInitializeOptions, GooglePayPaymentProcessor } from './';\nimport { GooglePaymentData, GooglePayInitializer, PaymentMethodData } from './googlepay';\n\nexport default class GooglePayPaymentStrategy extends PaymentStrategy {\n    private _googlePayOptions!: GooglePayPaymentInitializeOptions;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.googlepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        this._googlePayOptions = options.googlepay;\n\n        const walletButton = options.googlepay.walletButton && document.getElementById(options.googlepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return Promise.all([\n            this._googlePayInitializer.teardown(),\n            this._googlePayPaymentProcessor.deinitialize(),\n        ]).then(() => super.deinitialize(options));\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._createOrder(this._getPayment(), payload.useStoreCredit, options);\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._googlePayPaymentProcessor.updateBillingAddress(paymentData.cardInfo.billingAddress),\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _getPayment(): PaymentMethodData {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._paymentInstrumentSelected(paymentData))\n            .then(() => onPaymentSelect())\n            .catch(error => onError(error));\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy extends PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store);\n\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$.take(1)\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { createShippingStrategyRegistry, ShippingStrategyActionCreator } from '../shipping';\n\nimport {\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentStrategyActionCreator,\n    PaymentStrategyRegistry\n\n } from './';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    GooglePayPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { GooglePayBraintreeInitializer, GooglePayPaymentProcessor, GooglePayScriptLoader } from './strategies/googlepay';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSdkCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            new BillingAddressActionCreator(\n                new BillingAddressRequestSender(requestSender)\n            ),\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(getScriptLoader()),\n            new WepayRiskClient(scriptLoader))\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new GooglePayBraintreeInitializer(braintreeSdkCreator),\n            new GooglePayPaymentProcessor(\n                store,\n                paymentMethodActionCreator,\n                new GooglePayScriptLoader(scriptLoader),\n                new GooglePayBraintreeInitializer(braintreeSdkCreator),\n                new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n                new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n                requestSender\n            )\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport * as actionTypes from './instrument-action-types';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_REQUESTED));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_SUCCEEDED, body, currentToken));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_INSTRUMENTS_FAILED, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_REQUESTED, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({ ...session, authToken: currentToken.vaultAccessToken }, instrumentId)\n                        .then(() => {\n                            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_SUCCEEDED, undefined, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.DELETE_INSTRUMENT_FAILED, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken()\n                .then(({ body = {} }: any) => ({\n                    vaultAccessToken: body.data.token,\n                    vaultAccessExpiry: body.data.expires_at,\n                }));\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport Instrument from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    RawInstrumentResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(response: Response<RawInstrumentsResponseBody>): Response<InstrumentsResponseBody> {\n        const payload = this._transformResponse(response);\n        const { vaulted_instruments } = payload.body;\n\n        payload.body = {\n            vaultedInstruments: this._transformVaultedInstruments(vaulted_instruments),\n        };\n\n        return payload;\n    }\n\n    transformErrorResponse(response: Response<RawInstrumentErrorResponseBody>): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: RawInstrumentResponseBody[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse({ data: body, status, statusText }: any): Response {\n        return {\n            headers: {},\n            body,\n            status,\n            statusText,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\n\nimport { InstrumentRequestContext } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    VaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessTokenResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadInstruments(requestContext: InstrumentRequestContext, shippingAddress?: Address): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(requestContext: InstrumentRequestContext, instrumentId: string): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstruments(requestContext: InstrumentRequestContext): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(requestContext, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstrumentsWithAddress(requestContext: InstrumentRequestContext, shippingAddress: Address): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender();\n    const store = createCheckoutStore({}, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n}\n","module.exports = require(\"rxjs/observable/defer\");","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","export const LOAD_COUNTRIES_REQUESTED = 'LOAD_COUNTRIES_REQUESTED';\nexport const LOAD_COUNTRIES_SUCCEEDED = 'LOAD_COUNTRIES_SUCCEEDED';\nexport const LOAD_COUNTRIES_FAILED = 'LOAD_COUNTRIES_FAILED';\n","export const LOAD_SHIPPING_COUNTRIES_REQUESTED = 'LOAD_SHIPPING_COUNTRIES_REQUESTED';\nexport const LOAD_SHIPPING_COUNTRIES_SUCCEEDED = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED';\nexport const LOAD_SHIPPING_COUNTRIES_FAILED = 'LOAD_SHIPPING_COUNTRIES_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","module.exports = require(\"rxjs/observable/from\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","module.exports = require(\"@bigcommerce/script-loader\");","import { setPrototypeOf } from '../../utility';\n\nexport default class StandardError extends Error {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","module.exports = require(\"@bigcommerce/form-poster\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     braintreepaypal: {\n     *         container: '#checkoutButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Observable<InitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n            this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, options),\n            defer(() => this._registry.get(options.methodId).initialize(options)\n                .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n        );\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize(options)\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized = false;\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, paypalOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize(options);\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Checkout, CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { PaymentInitializeOptions, PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { GooglePayAddress, GooglePayBraintreeSDK, GooglePayPaymentOptions, GooglePayPaymentStrategy, GooglePayScriptLoader, GooglePaySDK } from '../../../payment/strategies/googlepay';\nimport GooglePayPaymentProcessor from '../../../payment/strategies/googlepay/googlepay-payment-processor';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { GooglePayBraintreeButtonInitializeOptions } from './googlepay-braintree-button-options';\n\nexport default class GooglePayBraintreeButtonStrategy extends CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _methodId!: string;\n    private _checkout?: Checkout;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { googlepaybraintree, methodId } = options;\n\n        if (!googlepaybraintree || !methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(stateCheckout => {\n                this._checkout = stateCheckout.checkout.getCheckout();\n                if (!this._checkout || !this._checkout.cart.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                return this._googlePayPaymentProcessor.initialize(methodId)\n                    .then(() => {\n                        const walletButton = this._createSignInButton(googlepaybraintree.container);\n\n                        if (walletButton) {\n                            this._walletButton = walletButton;\n                            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                        }\n                    });\n            }).then(() => super.initialize(options));\n    }\n\n    // initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n    //     if (this._isInitialized) {\n    //         return super.initialize(options);\n    //     }\n\n    //     const { googlepaybraintree, methodId } = options;\n\n    //     if (!googlepaybraintree || !methodId) {\n    //         throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    //     }\n\n    //     this._methodId = methodId;\n\n    //     return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n    //         .then(stateCheckout => {\n    //             this._checkout = stateCheckout.checkout.getCheckout();\n    //             if (!this._checkout || !this._checkout.cart.id) {\n    //                 throw new MissingDataError(MissingDataErrorType.MissingCart);\n    //             }\n\n    //             this._paymentMethod = stateCheckout.paymentMethods.getPaymentMethod(methodId);\n    //             if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n    //                 throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    //             }\n\n    //             return this._googlePayPaymentProcessor.initialize(this._methodId)\n    //                 .then(() => this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick));\n\n    //     }).then(() => super.initialize(options));\n    // }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(() => this._onPaymentSelectComplete);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _createGooglePayButton(googleClientOptions: GooglePayPaymentOptions, googlepaybraintree: GooglePayBraintreeButtonInitializeOptions): Promise<void> {\n        return this._googlePayScriptLoader.load()\n            .then(googleSDK => {\n                const googleClient = new googleSDK.payments.api.PaymentsClient(googleClientOptions);\n\n                const googlePayButton = googleClient.createButton({});\n                const container = document.querySelector(`#${googlepaybraintree.container}`);\n\n                if (!container) {\n                    throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n                }\n\n                container.appendChild(googlePayButton);\n            });\n    }\n\n    @bind\n    private _handleWalletButtonClicked(): Promise<void> {\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(() => this._onPaymentSelectComplete());\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        let billingAddress: GooglePayAddress;\n        let shippingAddress: GooglePayAddress;\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => {\n                billingAddress = paymentData.cardInfo.billingAddress;\n                shippingAddress = paymentData.shippingAddress;\n                return this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            })\n            .then(() => {\n                return Promise.all([\n                    this._googlePayPaymentProcessor.updateBillingAddress(billingAddress),\n                    // this._googlePayPaymentProcessor.updateShippingAddress(shippingAddress),\n                ]).then(() => this._onPaymentSelectComplete());\n            });\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error) {\n            throw new Error(error.message);\n        }\n    }\n\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender();\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { createFormPoster, FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport CheckoutValidator from '../checkout/checkout-validator';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, PaymentActionCreator, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentRequestSender, PaymentStrategyActionCreator, PaymentStrategyRegistry } from '../payment';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { GooglePayBraintreeInitializer, GooglePayPaymentStrategy, GooglePayScriptLoader } from '../payment/strategies/googlepay';\nimport GooglePayPaymentProcessor from '../payment/strategies/googlepay/googlepay-payment-processor';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport { BraintreePaypalButtonStrategy, CheckoutButtonStrategy, GooglePayBraintreeButtonStrategy } from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CheckoutButtonStrategy> {\n    const registry = new Registry<CheckoutButtonStrategy>();\n    const scriptLoader = getScriptLoader();\n    const paymentClient = createPaymentClient(store);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender)));\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(\n        new PaymentStrategyRegistry(store),\n        orderActionCreator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        paymentRequestSender,\n        orderActionCreator\n    );\n    const googlepayScriptLoader = new GooglePayScriptLoader(scriptLoader);\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster()\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster(),\n            true\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayBraintreeButtonStrategy(\n            store,\n            new FormPoster(),\n            googlepayScriptLoader,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new GooglePayPaymentProcessor(\n                store,\n                paymentMethodActionCreator,\n                new GooglePayScriptLoader(scriptLoader),\n                new GooglePayBraintreeInitializer(braintreeSDKCreator),\n                new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n                new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n                requestSender\n            )\n        )\n    );\n\n    return registry;\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: Action\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find, map } from 'lodash';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._combineLineItems(\n                    consignment,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: ['consignments.availableShippingOptions'],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _combineLineItems(\n        consignment: ConsignmentAssignmentRequestBody,\n        existingConsignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!existingConsignment) {\n            return consignment.lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const existingLineItems = map(existingConsignment.lineItemIds, itemId => {\n            const item = find(cart.lineItems.physicalItems, { id: itemId });\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        }) as ConsignmentLineItem[];\n\n        return existingLineItems.concat(consignment.lineItems);\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig()(store),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function countryReducer(state: CountryState = DEFAULT_STATE, action: Action): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: CountryErrorsState = DEFAULT_STATE.errors, action: Action): CountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: CountryStatusesState = DEFAULT_STATE.statuses, action: Action): CountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T extends object>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport * as actionTypes from './instrument-action-types';\n\nimport Instrument from './instrument';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(state: InstrumentState = DEFAULT_STATE, action: Action): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Instrument[] = DEFAULT_STATE.data, action: Action): Instrument[] {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return action.payload.vaultedInstruments || [];\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: InstrumentMeta | undefined, action: Action): InstrumentMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: InstrumentErrorState = DEFAULT_STATE.errors, action: Action): InstrumentErrorState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: InstrumentStatusState = DEFAULT_STATE.statuses, action: Action): InstrumentStatusState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\ntype RemoteCheckout = AfterpayRemoteCheckout | AmazonPayRemoteCheckout;\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: Action\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = {},\n    action: Action\n): RemoteCheckout {\n    switch (action.type) {\n    case actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED:\n        return { ...data, billing: action.payload.billing };\n\n    case actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED:\n        return { ...data, shipping: action.payload.shipping };\n\n    case actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED:\n        return { ...data, settings: action.payload };\n\n    case actionTypes.UPDATE_REMOTE_CHECKOUT:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function shippingCountryReducer(state: ShippingCountryState = DEFAULT_STATE, action: Action): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: ShippingCountryErrorsState = DEFAULT_STATE.errors, action: Action): ShippingCountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses, action: Action): ShippingCountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","module.exports = require(\"rxjs/observable/merge\");","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { GooglePayBraintreeSDK } from '../googlepay';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => {\n                    return googlePay.create({ client });\n                });\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","module.exports = require(\"rxjs/observable/empty\");","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender)\n        )\n    );\n\n    return registry;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\nimport { BraintreeModule, BraintreeModuleCreator } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype AddressFormat = 'FULL' | 'MIN';\ntype TotalPriceStatus = 'ESTIMATED' | 'FINAL' | 'NOT_CURRENTLY_KNOWN';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayBraintreeSDK extends BraintreeModule {\n    createPaymentDataRequest(request?: GooglePayDataRequestV1): GooglePayPaymentDataRequestV1;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV1>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayDataRequestV1 {\n    merchantInfo: {\n        authJwt?: string,\n    };\n    transactionInfo: {\n        currencyCode: string,\n        totalPriceStatus: TotalPriceStatus,\n        totalPrice: string,\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean,\n        billingAddressFormat: AddressFormat,\n    };\n    emailRequired: boolean;\n    phoneNumberRequired: boolean;\n    shippingAddressRequired: boolean;\n}\n\nexport interface GooglePayPaymentDataRequestV1 {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    enviroment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: string;\n    };\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV1): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: TokenizeType;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    cardInfo: {\n        cardClass: string;\n        cardDescription: string;\n        cardDetails: string;\n        cardImageUri: string;\n        cardNetwork: string;\n        billingAddress: GooglePayAddress;\n    };\n    paymentMethodToken: {\n        token: string;\n        tokenizationType: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    address4: string;\n    address5: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n","import { PaymentMethodActionCreator } from '../..';\nimport { RequestSender, Response } from '../../../../node_modules/@bigcommerce/request-sender/lib';\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport toFormUrlEncoded from '../../../common/http-request/to-form-url-encoded';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ShippingStrategyActionCreator } from '../../../shipping';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentsError,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV1,\n    GooglePayScriptLoader,\n    GooglePaySDK,\n    TokenizePayload\n} from './';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePaymentsClient!: GooglePayClient;\n    private _methodId!: string;\n    private _googlePaymentDataRequest!: GooglePayPaymentDataRequestV1;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _requestSender: RequestSender\n    ) { }\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(onClick: () => {},\n                 buttonType: ButtonType = ButtonType.Short,\n                 buttonColor: ButtonColor = ButtonColor.Default): HTMLElement {\n        return this._googlePaymentsClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    updateBillingAddress(billingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        if (!this._methodId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayAddressMapped: BillingAddressUpdateRequestBody = this._mapGooglePayAddressToBillingAddress(billingAddress, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors | void> {\n        if (!this._methodId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        if (!shippingAddress) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(\n            this._shippingStrategyActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePaymentsClient && !this._googlePaymentDataRequest) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePaymentsClient.isReadyToPay({\n            allowedPaymentMethods: this._googlePaymentDataRequest.allowedPaymentMethods,\n        }).then( response => {\n            if (response.result) {\n                return this._googlePaymentsClient.loadPaymentData(this._googlePaymentDataRequest)\n                    .then(paymentData => paymentData)\n                    .catch((err: GooglePaymentsError) => {\n                        throw new Error(err.statusCode);\n                    });\n            } else {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n        });\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<any> {\n        return this._googlePayInitializer.parseResponse(paymentData)\n            .then(tokenizedPayload => this._postForm(tokenizedPayload));\n    }\n\n    private _configureWallet(): Promise<void> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ])\n                    .then(([googlePay, googlePayPaymentDataRequest]) => {\n                        this._googlePaymentsClient = this._getGooglePaymentsClient(googlePay, true);\n                        this._googlePaymentDataRequest = googlePayPaymentDataRequest;\n                    })\n                    .catch((error: Error) => {\n                        throw new StandardError(error.message);\n                    });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getGooglePaymentsClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _mapGooglePayAddressToBillingAddress(address: GooglePayAddress, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3 + address.address4 + address.address5,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3 + address.address4 + address.address5,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<any>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._methodId,\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { Masterpass, MasterpassHostWindow } from '../masterpass/masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { MasterpassScriptLoader } from '../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class MasterpassCustomerStrategy extends CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CustomerCredentials } from '../';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../';\nimport { FormPoster } from '../../../node_modules/@bigcommerce/form-poster/lib';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError} from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport { GooglePayAddress, GooglePayPaymentProcessor } from '../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\n\nimport { CustomerStrategy } from './';\n\nexport default class GooglePayBraintreeCustomerStrategy extends CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { googlepaybraintree, methodId }  = options;\n\n        if (!googlepaybraintree || !methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                const walletButton = this._createSignInButton(googlepaybraintree.container);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(() => this._onPaymentSelectComplete);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error) {\n            throw new Error(error.message);\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        let billingAddress: GooglePayAddress;\n        let shippingAddress: GooglePayAddress;\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => {\n                billingAddress = paymentData.cardInfo.billingAddress;\n                shippingAddress = paymentData.shippingAddress;\n                return this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            })\n            .then(() => {\n            return Promise.all([\n                this._googlePayPaymentProcessor.updateShippingAddress(shippingAddress),\n                this._googlePayPaymentProcessor.updateBillingAddress(billingAddress),\n            ]).then(() => this._onPaymentSelectComplete());\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { GooglePayBraintreeInitializer, GooglePayPaymentProcessor, GooglePayScriptLoader} from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { createShippingStrategyRegistry, ShippingStrategyActionCreator } from '../shipping';\n\nimport { CustomerActionCreator, CustomerRequestSender, CustomerStrategyActionCreator } from './';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n    GooglePayBraintreeCustomerStrategy,\n    MasterpassCustomerStrategy,\n    SquareCustomerStrategy\n} from './strategies';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSdkCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayBraintreeCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            new GooglePayPaymentProcessor(\n                store,\n                paymentMethodActionCreator,\n                new GooglePayScriptLoader(scriptLoader),\n                new GooglePayBraintreeInitializer(braintreeSdkCreator),\n                new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n                new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n                requestSender\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"rxjs\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token: string = this._options.defaultToken, cacheToken: string = token): T {\n        try {\n            return this._getInstance(token, cacheToken);\n        } catch (error) {\n            return this._getInstance(this._options.defaultToken, cacheToken);\n        }\n    }\n\n    register(token: string, factory: Factory<T>): void {\n        if (this.hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this.hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_BILLING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_REMOTE_SETTINGS_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(actionTypes.UPDATE_REMOTE_CHECKOUT, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { Checkout } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayDataRequestV1,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV1,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeSDK } from './googlepay';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n               checkout: Checkout,\n               paymentMethod: PaymentMethod,\n               hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV1> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData.platformToken,\n                    hasShippingAddress);\n            }).catch((error: Error) => {\n                throw new StandardError(error.message);\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        return this._googlePaymentInstance.parseResponse(paymentData);\n    }\n\n    private _createGooglePayPayload(\n                                    checkout: Checkout,\n                                    platformToken: string,\n                                    hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV1 {\n        if (!platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePaymentDataRequest: GooglePayDataRequestV1 = {\n            merchantInfo: {\n                authJwt: platformToken,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: checkout.grandTotal.toString(),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._googlePaymentInstance.createPaymentDataRequest(googlePaymentDataRequest);\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this.hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}