{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-types.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-types.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-action-types.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-types.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-braintree-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay-braintree-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","CountryActionCreator","_countryRequestSender","this","loadCountries","options","_this","Observable_","observer","next","data_store_","country_action_types","then","response","body","data","complete","catch","error","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","_super","OrderFinalizationNotRequiredError","type","external_tslib_","standard_error","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","MissingPaymentMethod","getByMethod","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","concat_","of_","FinalizeRequested","_loadOrderPaymentsIfNeeded","defer_","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","empty_","PaymentStrategyRegistry","_store","paymentMethod","token","_getToken","cacheToken","hasFactory","payment_method_types","_isLegacyMethod","config","getStoreConfig","MissingCheckoutConfig","clientSidePaymentProviders","paymentSettings","external_lodash_","registry_registry","isVaultedInstrument","instrument","Boolean","instrumentId","CardBrand","DigitalWalletType","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","from_","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","cart","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentArgumentInvalidError","invalidFields","message","join","PaymentStrategy","_isInitialized","Promise","reject","resolve","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","validate","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","MissingCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","address","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","PaymentMethodCancelledError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","grandTotal","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","status","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","assign","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","String","subtotal","pending","post","Accept","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","Error","handleSuccess","GooglePayPaymentStrategy","_googlePayInitializer","_googlePayPaymentProcessor","_methodId","googlepay","_googlePayOptions","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","removeEventListener","teardown","_createOrder","_getPayment","updateBillingAddress","cardInfo","MissingPayment","cardInformation","card_information","event","preventDefault","displayWallet","bind_decorator","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","country","endpoint","ChasePayEventType","ChasePayPaymentStrategy","_chasePayScriptLoader","_walletEvent$","external_rxjs_","chasepay","_configureWallet","_chasePayClient","subtype","_displayWallet","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","take","merchantRequestId","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","KlarnaScriptLoader","Klarna","Credit","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","braintreeSdkCreator","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","billing_address_action_creator","billing_address_request_sender","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","chasepay_payment_strategy","chasepay_script_loader","wepay_risk_client","googlepay_payment_strategy","googlepay_braintree_initializer","googlepay_payment_processor","googlepay_script_loader","shipping_strategy_action_creator","create_shipping_strategy_registry","wepay_payment_strategy","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_action_types","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","getVaultAccessToken","expires_at","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","_transformResponse","vaulted_instruments","vaultedInstruments","_transformVaultedInstruments","transformErrorResponse","map","bigpayToken","bigpay_token","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","statusText","InstrumentRequestSender","_client","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","coupons","_customer","_form","form","_giftCertificates","giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","statuses","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","input","split","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","loadCheckout","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","shouldWarnMutation","request_sender_","create_checkout_store","create_payment_client","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","standard_error_StandardError","StandardError","setPrototypeOf","__proto__","_newTarget","captureStackTrace","stack","ShippingStrategyActionType","CouponActionType","BillingAddressActionType","GiftCertificateActionType","ACKNOWLEDGE","FINALIZE","CheckoutActionType","OrderActionType","CartChangedError","checkout_validator_CheckoutValidator","CheckoutValidator","_checkoutRequestSender","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","isEqual","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","DEFAULT_RESPONSE","RequestError","Array","isArray","reduce","result","joinErrors","detail","title","tslib__WEBPACK_IMPORTED_MODULE_0__","CheckoutButtonSelector","_checkoutButton","lodash__WEBPACK_IMPORTED_MODULE_1__","isDeinitializing","initializeError","getDeinitializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","CustomerStrategyActionType","PaymentStrategyActionType","PaymentMethodActionType","INITIALIZE_REMOTE_BILLING_REQUESTED","INITIALIZE_REMOTE_BILLING_SUCCEEDED","INITIALIZE_REMOTE_BILLING_FAILED","INITIALIZE_REMOTE_SHIPPING_REQUESTED","INITIALIZE_REMOTE_SHIPPING_SUCCEEDED","INITIALIZE_REMOTE_SHIPPING_FAILED","INITIALIZE_REMOTE_PAYMENT_REQUESTED","INITIALIZE_REMOTE_PAYMENT_SUCCEEDED","INITIALIZE_REMOTE_PAYMENT_FAILED","LOAD_REMOTE_SETTINGS_REQUESTED","LOAD_REMOTE_SETTINGS_SUCCEEDED","LOAD_REMOTE_SETTINGS_FAILED","SIGN_OUT_REMOTE_CUSTOMER_REQUESTED","SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED","SIGN_OUT_REMOTE_CUSTOMER_FAILED","UPDATE_REMOTE_CHECKOUT","LOAD_INSTRUMENTS_REQUESTED","LOAD_INSTRUMENTS_SUCCEEDED","LOAD_INSTRUMENTS_FAILED","DELETE_INSTRUMENT_REQUESTED","DELETE_INSTRUMENT_SUCCEEDED","DELETE_INSTRUMENT_FAILED","CheckoutButtonActionType","ContentType","__webpack_exports__","ConfigActionType","LOAD_COUNTRIES_REQUESTED","LOAD_COUNTRIES_SUCCEEDED","LOAD_COUNTRIES_FAILED","LOAD_SHIPPING_COUNTRIES_REQUESTED","LOAD_SHIPPING_COUNTRIES_SUCCEEDED","LOAD_SHIPPING_COUNTRIES_FAILED","DEFAULT_STATE","CustomerActionType","PaymentActionType","HOSTED","OFFLINE","CacheKeyResolver","_lastId","_maps","getKey","args","_resolveMap","index","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","push","CheckoutButtonErrorSelector","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","checkout_button_error_selector","checkout_button_status_selector","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","CheckoutButtonStrategy","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","Button","render","env","commit","shouldProcessPayment","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","checkout_button_strategy","GooglePayBraintreeButtonStrategy","_googlePayScriptLoader","googlepaybraintree","stateCheckout","_createSignInButton","containerId","querySelector","googlePayButton","createButton","_onPaymentSelectComplete","appendChild","_onError","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","googlepayScriptLoader","formPoster","braintree_paypal_button_strategy","googlepay_braintree_button_strategy","createCheckoutButtonRegistry","mapToInternalLineItems","itemMap","decimalPlaces","idKey","keys","item","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","createError","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","amountTransformer","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","productId","option","addedByPromotion","BillingAddressSelector","continueAsGuestError","createFreezeProxy","target","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","forEach","charAt","createProxy","ConfigSelector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","CountrySelector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","step","storeCredit","payments","providerType","PaymentMethodSelector","loadMethodId","loadMethodError","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","billing_address_selector","cart_selector","checkout_button_selector","config_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","payment_selector","createFreezeProxies","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","getConsignmentByAddress","_createOrUpdateConsignment","lineItems","_combineLineItems","rxjs_Observable__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_5__","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","params","include","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","physicalItems","itemId","lineItemIds","DEFAULT_PARAMS","ConsignmentRequestSender","checkoutId","url","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","JsonV1","put","delete","mapToInternalCart","amount_transformer","map_to_internal_line_items","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotions","notifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","objectA","objectB","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keyFilter","keysA","keysB","length_2","isObjectEqual","selectorDecorator","decoratedTarget","class_1","descriptor","getOwnPropertyDescriptor","resolver","cache_key_resolver","memoizedMethod","cachedValue","newValue","is_private","cache","set","selectorMethodDecorator","CheckoutRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","CheckoutActionCreator","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_4__","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","_checkout_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_common_error__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_8__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","_getType","billingAddressReducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","LoadPaymentMethodSucceeded","array","predicate","newArray","mergeOrPush","LoadPaymentMethodsSucceeded","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodFailed","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_action_types","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","isPrivate","indexOf","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","isAddressEqual","addressA","addressB","lodash__WEBPACK_IMPORTED_MODULE_0__","normalize","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_3__","SignOutCustomerSucceeded","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","callbackUrl","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_action_types__WEBPACK_IMPORTED_MODULE_2__","INTERNAL_USE_ONLY","OrderRequestSender","OrderActionCreator","_orderRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_order_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","cartAmount","digitalItems","giftWrapping","BraintreeScriptLoader","loadClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","toFormUrlEncoded","encodeURIComponent","ShippingStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","mergedOptions","mapFromInternalAddress","addressLine1","addressLine2","province","provinceCode","postCode","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","mapToGiftCertificates","socialData","socialDataObject","socialMedia","find","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy_actions","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","amazon_pay_shipping_strategy","default_shipping_strategy","omitPrivate","omitDeep","isInternalAddressEqual","ignoredKeys","mapToInternalAddress","addressId","isBillingAddressLike","customerStrategyReducer","customer_strategy_actions","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","shippingStrategyReducer","ButtonType","ButtonColor","googlepay_payment_processor_GooglePayPaymentProcessor","GooglePayPaymentProcessor","onClick","buttonType","buttonColor","Short","Default","_googlePaymentsClient","remoteBillingAddress","googlePayAddressMapped","_mapGooglePayAddressToBillingAddress","_mapGooglePayAddressToShippingAddress","_googlePaymentDataRequest","isReadyToPay","allowedPaymentMethods","loadPaymentData","err","statusCode","parseResponse","tokenizedPayload","_postForm","hasShippingAddress","googlePay","googlePayPaymentDataRequest","_getGooglePaymentsClient","_getCardInformation","cardType","lastFour","google","api","PaymentsClient","companyName","address3","address4","address5","locality","administrativeArea","phoneNumber","postPaymentData","PaymentMethodInvalidError","CouponActionCreator","_couponRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","CustomerStrategyActionCreator","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","CustomerActionCreator","_customerRequestSender","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","SignInCustomerRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","SignInCustomerSucceeded","_common_error__WEBPACK_IMPORTED_MODULE_5__","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","MasterpassScriptLoader","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","size","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","visibility","buttonClass","_insertVisaCheckoutButton","visaCheckoutButton","createElement","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","SquareCustomerStrategy","MasterpassCustomerStrategy","_masterpassScriptLoader","masterpassOptions","allowedCardTypes","cartId","Masterpass","_signInButton","parentNode","removeChild","src","GooglePayBraintreeCustomerStrategy","DefaultCustomerStrategy","_customerActionCreator","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","masterpass_script_loader","googlepay_braintree_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","TimeoutError","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","_bigcommerce_bigpay_client__WEBPACK_IMPORTED_MODULE_0__","createPaymentClient","setHost","bigpayBaseUrl","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_2__","ConfigRequestSender","X-API-INTERNAL","MissingDataErrorType","MissingDataError","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","throwErrorAction","isErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","NotInitializedErrorType","NotInitializedError","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_options","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","hasInstance","InvalidArgumentError","PaymentMethodActionCreator","_payment_method_actions__WEBPACK_IMPORTED_MODULE_2__","sessionHash","PaymentMethodRequestSender","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_action_types__WEBPACK_IMPORTED_MODULE_2__","AmazonPayScriptLoader","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","setClientId","clientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","RemoteCheckoutSynchronizationError","GooglePayScriptLoader","GooglePayBraintreeInitializer","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","platformToken","googlePaymentDataRequest","merchantInfo","authJwt","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","createPaymentDataRequest","PaymentRequestSender","PaypalScriptLoader","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","format","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","getEnvironment","process","NODE_ENV","e","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","info","debug","NoopLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","getDefaultLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","lastTwo","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 172);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"rxjs/Observable\");","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryRequestSender from './country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(actionTypes.LOAD_COUNTRIES_REQUESTED));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this.hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = payment && payment.gatewayId === 'adyen' ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        window.location.assign(redirectUrl);\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { PaymentStrategy } from '../';\nimport {\n    Payment,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotInitializedError } from '../../../common/error/errors';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport {\n    OrderActionCreator, OrderRequestBody } from '../../../order';\n\nimport { GooglePayPaymentInitializeOptions, GooglePayPaymentProcessor } from './';\nimport { GooglePaymentData, GooglePayInitializer, PaymentMethodData } from './googlepay';\n\nexport default class GooglePayPaymentStrategy extends PaymentStrategy {\n    private _googlePayOptions!: GooglePayPaymentInitializeOptions;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.googlepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        this._googlePayOptions = options.googlepay;\n\n        const walletButton = options.googlepay.walletButton && document.getElementById(options.googlepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return Promise.all([\n            this._googlePayInitializer.teardown(),\n            this._googlePayPaymentProcessor.deinitialize(),\n        ]).then(() => super.deinitialize(options));\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._createOrder(this._getPayment(), payload.useStoreCredit, options);\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._googlePayPaymentProcessor.updateBillingAddress(paymentData.cardInfo.billingAddress),\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _getPayment(): PaymentMethodData {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._paymentInstrumentSelected(paymentData))\n            .then(() => onPaymentSelect())\n            .catch(error => onError(error));\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy extends PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store);\n\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$.take(1)\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { createShippingStrategyRegistry, ShippingStrategyActionCreator } from '../shipping';\n\nimport {\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentStrategyActionCreator,\n    PaymentStrategyRegistry\n\n } from './';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    GooglePayPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { GooglePayBraintreeInitializer, GooglePayPaymentProcessor, GooglePayScriptLoader } from './strategies/googlepay';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSdkCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            new BillingAddressActionCreator(\n                new BillingAddressRequestSender(requestSender)\n            ),\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(getScriptLoader()),\n            new WepayRiskClient(scriptLoader))\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new GooglePayBraintreeInitializer(braintreeSdkCreator),\n            new GooglePayPaymentProcessor(\n                store,\n                paymentMethodActionCreator,\n                new GooglePayScriptLoader(scriptLoader),\n                new GooglePayBraintreeInitializer(braintreeSdkCreator),\n                new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n                new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n                requestSender\n            )\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport * as actionTypes from './instrument-action-types';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_REQUESTED));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_SUCCEEDED, body, currentToken));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_INSTRUMENTS_FAILED, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_REQUESTED, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({ ...session, authToken: currentToken.vaultAccessToken }, instrumentId)\n                        .then(() => {\n                            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_SUCCEEDED, undefined, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.DELETE_INSTRUMENT_FAILED, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken()\n                .then(({ body = {} }: any) => ({\n                    vaultAccessToken: body.data.token,\n                    vaultAccessExpiry: body.data.expires_at,\n                }));\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport Instrument from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    RawInstrumentResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(response: Response<RawInstrumentsResponseBody>): Response<InstrumentsResponseBody> {\n        const payload = this._transformResponse(response);\n        const { vaulted_instruments } = payload.body;\n\n        payload.body = {\n            vaultedInstruments: this._transformVaultedInstruments(vaulted_instruments),\n        };\n\n        return payload;\n    }\n\n    transformErrorResponse(response: Response<RawInstrumentErrorResponseBody>): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: RawInstrumentResponseBody[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse({ data: body, status, statusText }: any): Response {\n        return {\n            headers: {},\n            body,\n            status,\n            statusText,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\n\nimport { InstrumentRequestContext } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    VaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessTokenResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadInstruments(requestContext: InstrumentRequestContext, shippingAddress?: Address): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(requestContext: InstrumentRequestContext, instrumentId: string): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstruments(requestContext: InstrumentRequestContext): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(requestContext, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstrumentsWithAddress(requestContext: InstrumentRequestContext, shippingAddress: Address): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender();\n    const store = createCheckoutStore({}, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n}\n","import { setPrototypeOf } from '../../utility';\n\nexport default class StandardError extends Error {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","module.exports = require(\"rxjs/observable/defer\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"rxjs/observable/from\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","export const INITIALIZE_REMOTE_BILLING_REQUESTED = 'INITIALIZE_REMOTE_BILLING_REQUESTED';\nexport const INITIALIZE_REMOTE_BILLING_SUCCEEDED = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_BILLING_FAILED = 'INITIALIZE_REMOTE_BILLING_FAILED';\n\nexport const INITIALIZE_REMOTE_SHIPPING_REQUESTED = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED';\nexport const INITIALIZE_REMOTE_SHIPPING_SUCCEEDED = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_SHIPPING_FAILED = 'INITIALIZE_REMOTE_SHIPPING_FAILED';\n\nexport const INITIALIZE_REMOTE_PAYMENT_REQUESTED = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED';\nexport const INITIALIZE_REMOTE_PAYMENT_SUCCEEDED = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED';\nexport const INITIALIZE_REMOTE_PAYMENT_FAILED = 'INITIALIZE_REMOTE_PAYMENT_FAILED';\n\nexport const LOAD_REMOTE_SETTINGS_REQUESTED = 'LOAD_REMOTE_SETTINGS_REQUESTED';\nexport const LOAD_REMOTE_SETTINGS_SUCCEEDED = 'LOAD_REMOTE_SETTINGS_SUCCEEDED';\nexport const LOAD_REMOTE_SETTINGS_FAILED = 'LOAD_REMOTE_SETTINGS_FAILED';\n\nexport const SIGN_OUT_REMOTE_CUSTOMER_REQUESTED = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_FAILED = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED';\n\nexport const UPDATE_REMOTE_CHECKOUT = 'UPDATE_REMOTE_CHECKOUT';\n","export const LOAD_INSTRUMENTS_REQUESTED = 'LOAD_INSTRUMENTS_REQUESTED';\nexport const LOAD_INSTRUMENTS_SUCCEEDED = 'LOAD_INSTRUMENTS_SUCCEEDED';\nexport const LOAD_INSTRUMENTS_FAILED = 'LOAD_INSTRUMENTS_FAILED';\n\nexport const DELETE_INSTRUMENT_REQUESTED = 'DELETE_INSTRUMENT_REQUESTED';\nexport const DELETE_INSTRUMENT_SUCCEEDED = 'DELETE_INSTRUMENT_SUCCEEDED';\nexport const DELETE_INSTRUMENT_FAILED = 'DELETE_INSTRUMENT_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","export const LOAD_COUNTRIES_REQUESTED = 'LOAD_COUNTRIES_REQUESTED';\nexport const LOAD_COUNTRIES_SUCCEEDED = 'LOAD_COUNTRIES_SUCCEEDED';\nexport const LOAD_COUNTRIES_FAILED = 'LOAD_COUNTRIES_FAILED';\n","export const LOAD_SHIPPING_COUNTRIES_REQUESTED = 'LOAD_SHIPPING_COUNTRIES_REQUESTED';\nexport const LOAD_SHIPPING_COUNTRIES_SUCCEEDED = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED';\nexport const LOAD_SHIPPING_COUNTRIES_FAILED = 'LOAD_SHIPPING_COUNTRIES_FAILED';\n","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     braintreepaypal: {\n     *         container: '#checkoutButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Observable<InitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n            this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, options),\n            defer(() => this._registry.get(options.methodId).initialize(options)\n                .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n        );\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize(options)\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized = false;\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, paypalOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize(options);\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Checkout, CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { PaymentInitializeOptions, PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { GooglePayAddress, GooglePayBraintreeSDK, GooglePayPaymentOptions, GooglePayPaymentStrategy, GooglePayScriptLoader, GooglePaySDK } from '../../../payment/strategies/googlepay';\nimport GooglePayPaymentProcessor from '../../../payment/strategies/googlepay/googlepay-payment-processor';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { GooglePayBraintreeButtonInitializeOptions } from './googlepay-braintree-button-options';\n\nexport default class GooglePayBraintreeButtonStrategy extends CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _methodId!: string;\n    private _checkout?: Checkout;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { googlepaybraintree, methodId } = options;\n\n        if (!googlepaybraintree || !methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(stateCheckout => {\n                this._checkout = stateCheckout.checkout.getCheckout();\n                if (!this._checkout || !this._checkout.cart.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                return this._googlePayPaymentProcessor.initialize(methodId)\n                    .then(() => {\n                        this._walletButton = this._createSignInButton(googlepaybraintree.container);\n\n                        if (this._walletButton) {\n                            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                        }\n                    });\n            }).then(() => super.initialize(options));\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(() => this._onPaymentSelectComplete);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        let billingAddress: GooglePayAddress;\n        let shippingAddress: GooglePayAddress;\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => {\n                billingAddress = paymentData.cardInfo.billingAddress;\n                shippingAddress = paymentData.shippingAddress;\n                return this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            })\n            .then(() => {\n                return Promise.all([\n                    this._googlePayPaymentProcessor.updateBillingAddress(billingAddress),\n                    // this._googlePayPaymentProcessor.updateShippingAddress(shippingAddress),\n                ]).then(() => this._onPaymentSelectComplete());\n            });\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error) {\n            throw new Error(error.message);\n        }\n    }\n\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender();\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { createFormPoster, FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport CheckoutValidator from '../checkout/checkout-validator';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, PaymentActionCreator, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentRequestSender, PaymentStrategyActionCreator, PaymentStrategyRegistry } from '../payment';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { GooglePayBraintreeInitializer, GooglePayPaymentStrategy, GooglePayScriptLoader } from '../payment/strategies/googlepay';\nimport GooglePayPaymentProcessor from '../payment/strategies/googlepay/googlepay-payment-processor';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport { BraintreePaypalButtonStrategy, CheckoutButtonStrategy, GooglePayBraintreeButtonStrategy } from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CheckoutButtonStrategy> {\n    const registry = new Registry<CheckoutButtonStrategy>();\n    const scriptLoader = getScriptLoader();\n    const paymentClient = createPaymentClient(store);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender)));\n    const googlepayScriptLoader = new GooglePayScriptLoader(scriptLoader);\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const formPoster = createFormPoster();\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayBraintreeButtonStrategy(\n            store,\n            formPoster,\n            googlepayScriptLoader,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new GooglePayPaymentProcessor(\n                store,\n                paymentMethodActionCreator,\n                new GooglePayScriptLoader(scriptLoader),\n                new GooglePayBraintreeInitializer(braintreeSDKCreator),\n                new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n                new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n                requestSender\n            )\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: Action\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find, map } from 'lodash';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._combineLineItems(\n                    consignment,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: ['consignments.availableShippingOptions'],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _combineLineItems(\n        consignment: ConsignmentAssignmentRequestBody,\n        existingConsignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!existingConsignment) {\n            return consignment.lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const existingLineItems = map(existingConsignment.lineItemIds, itemId => {\n            const item = find(cart.lineItems.physicalItems, { id: itemId });\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        }) as ConsignmentLineItem[];\n\n        return existingLineItems.concat(consignment.lineItems);\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig()(store),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function countryReducer(state: CountryState = DEFAULT_STATE, action: Action): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: CountryErrorsState = DEFAULT_STATE.errors, action: Action): CountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: CountryStatusesState = DEFAULT_STATE.statuses, action: Action): CountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T extends object>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport * as actionTypes from './instrument-action-types';\n\nimport Instrument from './instrument';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(state: InstrumentState = DEFAULT_STATE, action: Action): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Instrument[] = DEFAULT_STATE.data, action: Action): Instrument[] {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return action.payload.vaultedInstruments || [];\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: InstrumentMeta | undefined, action: Action): InstrumentMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: InstrumentErrorState = DEFAULT_STATE.errors, action: Action): InstrumentErrorState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: InstrumentStatusState = DEFAULT_STATE.statuses, action: Action): InstrumentStatusState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\ntype RemoteCheckout = AfterpayRemoteCheckout | AmazonPayRemoteCheckout;\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: Action\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = {},\n    action: Action\n): RemoteCheckout {\n    switch (action.type) {\n    case actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED:\n        return { ...data, billing: action.payload.billing };\n\n    case actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED:\n        return { ...data, shipping: action.payload.shipping };\n\n    case actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED:\n        return { ...data, settings: action.payload };\n\n    case actionTypes.UPDATE_REMOTE_CHECKOUT:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function shippingCountryReducer(state: ShippingCountryState = DEFAULT_STATE, action: Action): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: ShippingCountryErrorsState = DEFAULT_STATE.errors, action: Action): ShippingCountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses, action: Action): ShippingCountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"rxjs/observable/merge\");","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { GooglePayBraintreeSDK } from '../googlepay';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => {\n                    return googlePay.create({ client });\n                });\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender)\n        )\n    );\n\n    return registry;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\nimport { BraintreeModule, BraintreeModuleCreator } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype AddressFormat = 'FULL' | 'MIN';\ntype TotalPriceStatus = 'ESTIMATED' | 'FINAL' | 'NOT_CURRENTLY_KNOWN';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayBraintreeSDK extends BraintreeModule {\n    createPaymentDataRequest(request?: GooglePayDataRequestV1): GooglePayPaymentDataRequestV1;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV1>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayDataRequestV1 {\n    merchantInfo: {\n        authJwt?: string,\n    };\n    transactionInfo: {\n        currencyCode: string,\n        totalPriceStatus: TotalPriceStatus,\n        totalPrice: string,\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean,\n        billingAddressFormat: AddressFormat,\n    };\n    emailRequired: boolean;\n    phoneNumberRequired: boolean;\n    shippingAddressRequired: boolean;\n}\n\nexport interface GooglePayPaymentDataRequestV1 {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    enviroment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: string;\n    };\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV1): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: TokenizeType;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    cardInfo: {\n        cardClass: string;\n        cardDescription: string;\n        cardDetails: string;\n        cardImageUri: string;\n        cardNetwork: string;\n        billingAddress: GooglePayAddress;\n    };\n    paymentMethodToken: {\n        token: string;\n        tokenizationType: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    address4: string;\n    address5: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n","import { PaymentMethodActionCreator } from '../..';\nimport { RequestSender, Response } from '../../../../node_modules/@bigcommerce/request-sender/lib';\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport toFormUrlEncoded from '../../../common/http-request/to-form-url-encoded';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ShippingStrategyActionCreator } from '../../../shipping';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentsError,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV1,\n    GooglePayScriptLoader,\n    GooglePaySDK,\n    TokenizePayload\n} from './';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePaymentsClient!: GooglePayClient;\n    private _methodId!: string;\n    private _googlePaymentDataRequest!: GooglePayPaymentDataRequestV1;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _requestSender: RequestSender\n    ) { }\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(onClick: () => {},\n                 buttonType: ButtonType = ButtonType.Short,\n                 buttonColor: ButtonColor = ButtonColor.Default): HTMLElement {\n        return this._googlePaymentsClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    updateBillingAddress(billingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        if (!this._methodId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayAddressMapped: BillingAddressUpdateRequestBody = this._mapGooglePayAddressToBillingAddress(billingAddress, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors | void> {\n        if (!this._methodId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        if (!shippingAddress) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(\n            this._shippingStrategyActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePaymentsClient && !this._googlePaymentDataRequest) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePaymentsClient.isReadyToPay({\n            allowedPaymentMethods: this._googlePaymentDataRequest.allowedPaymentMethods,\n        }).then( response => {\n            if (response.result) {\n                return this._googlePaymentsClient.loadPaymentData(this._googlePaymentDataRequest)\n                    .then(paymentData => paymentData)\n                    .catch((err: GooglePaymentsError) => {\n                        throw new Error(err.statusCode);\n                    });\n            } else {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n        });\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<any> {\n        return this._googlePayInitializer.parseResponse(paymentData)\n            .then(tokenizedPayload => this._postForm(tokenizedPayload));\n    }\n\n    private _configureWallet(): Promise<void> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ])\n                    .then(([googlePay, googlePayPaymentDataRequest]) => {\n                        this._googlePaymentsClient = this._getGooglePaymentsClient(googlePay, true);\n                        this._googlePaymentDataRequest = googlePayPaymentDataRequest;\n                    })\n                    .catch((error: Error) => {\n                        throw new StandardError(error.message);\n                    });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getGooglePaymentsClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _mapGooglePayAddressToBillingAddress(address: GooglePayAddress, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3 + address.address4 + address.address5,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3 + address.address4 + address.address5,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<any>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._methodId,\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { Masterpass, MasterpassHostWindow } from '../masterpass/masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { MasterpassScriptLoader } from '../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class MasterpassCustomerStrategy extends CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CustomerCredentials } from '../';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../';\nimport { FormPoster } from '../../../node_modules/@bigcommerce/form-poster/lib';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError} from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport { GooglePayAddress, GooglePayPaymentProcessor } from '../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\n\nimport { CustomerStrategy } from './';\n\nexport default class GooglePayBraintreeCustomerStrategy extends CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { googlepaybraintree, methodId }  = options;\n\n        if (!googlepaybraintree || !methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                const walletButton = this._createSignInButton(googlepaybraintree.container);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(() => this._onPaymentSelectComplete);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error) {\n            throw new Error(error.message);\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        let billingAddress: GooglePayAddress;\n        let shippingAddress: GooglePayAddress;\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => {\n                billingAddress = paymentData.cardInfo.billingAddress;\n                shippingAddress = paymentData.shippingAddress;\n                return this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            })\n            .then(() => {\n            return Promise.all([\n                this._googlePayPaymentProcessor.updateShippingAddress(shippingAddress),\n                this._googlePayPaymentProcessor.updateBillingAddress(billingAddress),\n            ]).then(() => this._onPaymentSelectComplete());\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { GooglePayBraintreeInitializer, GooglePayPaymentProcessor, GooglePayScriptLoader} from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { createShippingStrategyRegistry, ShippingStrategyActionCreator } from '../shipping';\n\nimport { CustomerActionCreator, CustomerRequestSender, CustomerStrategyActionCreator } from './';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n    GooglePayBraintreeCustomerStrategy,\n    MasterpassCustomerStrategy,\n    SquareCustomerStrategy\n} from './strategies';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSdkCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayBraintreeCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            new GooglePayPaymentProcessor(\n                store,\n                paymentMethodActionCreator,\n                new GooglePayScriptLoader(scriptLoader),\n                new GooglePayBraintreeInitializer(braintreeSdkCreator),\n                new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n                new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n                requestSender\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token: string = this._options.defaultToken, cacheToken: string = token): T {\n        try {\n            return this._getInstance(token, cacheToken);\n        } catch (error) {\n            return this._getInstance(this._options.defaultToken, cacheToken);\n        }\n    }\n\n    register(token: string, factory: Factory<T>): void {\n        if (this.hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this.hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_BILLING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_REMOTE_SETTINGS_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(actionTypes.UPDATE_REMOTE_CHECKOUT, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { Checkout } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayDataRequestV1,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV1,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeSDK } from './googlepay';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n               checkout: Checkout,\n               paymentMethod: PaymentMethod,\n               hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV1> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData.platformToken,\n                    hasShippingAddress);\n            }).catch((error: Error) => {\n                throw new StandardError(error.message);\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        return this._googlePaymentInstance.parseResponse(paymentData);\n    }\n\n    private _createGooglePayPayload(\n                                    checkout: Checkout,\n                                    platformToken: string,\n                                    hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV1 {\n        if (!platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePaymentDataRequest: GooglePayDataRequestV1 = {\n            merchantInfo: {\n                authJwt: platformToken,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: checkout.grandTotal.toString(),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._googlePaymentInstance.createPaymentDataRequest(googlePaymentDataRequest);\n    }\n}\n","module.exports = require(\"rxjs/observable/empty\");","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"rxjs\");","module.exports = require(\"messageformat\");","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}